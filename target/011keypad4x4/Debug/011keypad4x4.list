
011keypad4x4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e5c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010ac  080010ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080010ac  080010ac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010ac  080010ac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010ac  080010ac  000110ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b0  080010b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080010b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001118  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001118  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002317  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005c6  00000000  00000000  000223ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  00022978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e0  00000000  00000000  00022a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002af1  00000000  00000000  00022b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001345  00000000  00000000  00025661  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009168  00000000  00000000  000269a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002fb0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000928  00000000  00000000  0002fb8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001008 	.word	0x08001008

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001008 	.word	0x08001008

08000204 <main>:

#include<stdint.h>
#include<stdio.h>

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
  printf("Hello Serghei\n");
 800020a:	4894      	ldr	r0, [pc, #592]	; (800045c <main+0x258>)
 800020c:	f000 faf0 	bl	80007f0 <puts>
Address offset: 0x30
Reset value: 0x0010 0000
Boundary address 0x4002 3800 - 0x4002 3BFF RCC

*/
  uint32_t volatile *const pClockCtrlReg=(uint32_t*) (0x40023800+0x30);	//6.3.10  (RCC_AHB1ENR)
 8000210:	4b93      	ldr	r3, [pc, #588]	; (8000460 <main+0x25c>)
 8000212:	633b      	str	r3, [r7, #48]	; 0x30

  	  *pClockCtrlReg |= (1<<0); 	//Enable Clock on PortA
 8000214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f043 0201 	orr.w	r2, r3, #1
 800021c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800021e:	601a      	str	r2, [r3, #0]
  	  *pClockCtrlReg |= (1<<1);		//Enable Clock on PortB
 8000220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f043 0202 	orr.w	r2, r3, #2
 8000228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800022a:	601a      	str	r2, [r3, #0]
	  *pClockCtrlReg |= (1<<2);		//Enable Clock on PortC
 800022c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f043 0204 	orr.w	r2, r3, #4
 8000234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000236:	601a      	str	r2, [r3, #0]
• 0x0000 0000 for other ports
GPIOA Boundary address 0x4002 0000 - 0x4002 03FF
GPIOB Boundary address 0x4002 0400 - 0x4002 07FF
 * */

	uint32_t volatile *const pPortAModeReg=(uint32_t*)0x40020000;
 8000238:	4b8a      	ldr	r3, [pc, #552]	; (8000464 <main+0x260>)
 800023a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t volatile *const pPortBModeReg=(uint32_t*)0x40020400;
 800023c:	4b8a      	ldr	r3, [pc, #552]	; (8000468 <main+0x264>)
 800023e:	62bb      	str	r3, [r7, #40]	; 0x28

//configure mode of port A
//Configure PA8 IO pin as output
	*pPortAModeReg |=(1<<16);//
 8000240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800024a:	601a      	str	r2, [r3, #0]
//Configure PA10 IO pin as input
	*pPortAModeReg &=~(3<<20);//clear 20;21 position
 800024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000256:	601a      	str	r2, [r3, #0]
//Configure PA2 IO pin as input
	*pPortAModeReg &=~(3<<4);//clear 4;5 position
 8000258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000262:	601a      	str	r2, [r3, #0]
//Configure PA3 IO pin as input
	*pPortAModeReg &=~(3<<6);//clear 6;7 position
 8000264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800026e:	601a      	str	r2, [r3, #0]

	//Configure PA5 IO pin as output
		//a. clear 10 and 11 position
		*pPortAModeReg &=~(3<<10);//*pPortAModeReg &= 0xFFFFF3FF;
 8000270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800027a:	601a      	str	r2, [r3, #0]
		//b make 10 position as 1 set
		*pPortAModeReg |= (1<<10);//*pPortAModeReg |= 0x00000400;
 800027c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000286:	601a      	str	r2, [r3, #0]

//configure mode on port B
//Configure PB10 IO pin as output
	*pPortBModeReg |=(1<<20);//set 20 position
 8000288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000292:	601a      	str	r2, [r3, #0]
//Configure PB4 IO pin as output
	*pPortBModeReg &=~(1<<9);	//clear 9 position
 8000294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800029e:	601a      	str	r2, [r3, #0]
	*pPortBModeReg |=(1<<8);	//set 8 position
 80002a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002aa:	601a      	str	r2, [r3, #0]
//Configure PB5 IO pin as output
	*pPortBModeReg |=(1<<10);//set 10 position
 80002ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80002b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002b6:	601a      	str	r2, [r3, #0]
//Configure PB3 IO pin as input
	*pPortBModeReg &=~(3<<6);//clear 6;7 position
 80002b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80002c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c2:	601a      	str	r2, [r3, #0]
• 0x0000 0000 for other ports

GPIOA Boundary address 0x4002 0000 - 0x4002 03FF
GPIOB Boundary address 0x4002 0400 - 0x4002 07FF
*/
	uint32_t volatile *const pPortApullUpDownlReg=(uint32_t*)(0x40020000+0x0C);
 80002c4:	4b69      	ldr	r3, [pc, #420]	; (800046c <main+0x268>)
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t volatile *const pPortBpullUpDownlReg=(uint32_t*)(0x40020400+0x0C);
 80002c8:	4b69      	ldr	r3, [pc, #420]	; (8000470 <main+0x26c>)
 80002ca:	623b      	str	r3, [r7, #32]
	//Configure PA10 IO pin with pull-up
		*pPortApullUpDownlReg |=(1<<20);	//set 21 position
 80002cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80002d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d6:	601a      	str	r2, [r3, #0]
	//Configure PA2 IO pin with pull-up
		*pPortApullUpDownlReg |=(1<<4);		//set 4 position
 80002d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f043 0210 	orr.w	r2, r3, #16
 80002e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e2:	601a      	str	r2, [r3, #0]
	//Configure PA3 IO pin with pull-up
		*pPortApullUpDownlReg |=(1<<6);		//set 6 position
 80002e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ee:	601a      	str	r2, [r3, #0]
	//Configure PB3 IO pin with pull-up
		*pPortBpullUpDownlReg |=(1<<6);		//clear 6 position
 80002f0:	6a3b      	ldr	r3, [r7, #32]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002f8:	6a3b      	ldr	r3, [r7, #32]
 80002fa:	601a      	str	r2, [r3, #0]
/*	configure INPUT REG
 * 7.4.5 GPIO port input data register (GPIOx_IDR) (x = A..H)
 * Address offset: 0x10
 *Reset value: 0x0000 XXXX (where X means undefined)
 */
		uint32_t volatile *const pPortAInputReg=(uint32_t*)(0x40020000+0x10);
 80002fc:	4b5d      	ldr	r3, [pc, #372]	; (8000474 <main+0x270>)
 80002fe:	61fb      	str	r3, [r7, #28]
		uint32_t volatile *const pPortBInputReg=(uint32_t*)(0x40020400+0x10);
 8000300:	4b5d      	ldr	r3, [pc, #372]	; (8000478 <main+0x274>)
 8000302:	61bb      	str	r3, [r7, #24]
/*Configure OUTPUT REG
 * 7.4.6 GPIO port output data register (GPIOx_ODR) (x = A..H)
Address offset: 0x14
Reset value: 0x0000 0000
 */
		uint32_t volatile *const pPortAOutputReg=(uint32_t*)(0x40020000+0x14);
 8000304:	4b5d      	ldr	r3, [pc, #372]	; (800047c <main+0x278>)
 8000306:	617b      	str	r3, [r7, #20]
		uint32_t volatile *const pPortBOutputReg=(uint32_t*)(0x40020400+0x14);
 8000308:	4b5d      	ldr	r3, [pc, #372]	; (8000480 <main+0x27c>)
 800030a:	613b      	str	r3, [r7, #16]


//set outputs on HIGH
//Configure PB10 IO pin as 1
	*pPortBOutputReg |=(1<<10);	//
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	601a      	str	r2, [r3, #0]
//Configure PB4 IO pin as 1
	*pPortBOutputReg |=(1<<4);	//
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f043 0210 	orr.w	r2, r3, #16
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	601a      	str	r2, [r3, #0]
//Configure PB5 IO pin as 1
	*pPortBOutputReg |=(1<<5);	//
 8000324:	693b      	ldr	r3, [r7, #16]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f043 0220 	orr.w	r2, r3, #32
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	601a      	str	r2, [r3, #0]
//Configure PA8 IO pin as 1
	*pPortAOutputReg |=(1<<8);	//
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	601a      	str	r2, [r3, #0]
	*pPortBOutputReg &=~(1<<5);	//R4
//Configure PA8 IO pin as 0
	*pPortAOutputReg &=~(1<<8);	//R1
*/

	uint8_t a=0;
 800033c:	2300      	movs	r3, #0
 800033e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
while(a<3){
 8000342:	e024      	b.n	800038e <main+0x18a>
	//turn ONN the LED
		*pPortAOutputReg |=(1<<5);
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f043 0220 	orr.w	r2, r3, #32
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<500000; i++);
 8000350:	2300      	movs	r3, #0
 8000352:	653b      	str	r3, [r7, #80]	; 0x50
 8000354:	e002      	b.n	800035c <main+0x158>
 8000356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000358:	3301      	adds	r3, #1
 800035a:	653b      	str	r3, [r7, #80]	; 0x50
 800035c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800035e:	4a49      	ldr	r2, [pc, #292]	; (8000484 <main+0x280>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d9f8      	bls.n	8000356 <main+0x152>
	//turn OFF LED
		*pPortAOutputReg &=~(1<<5);
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f023 0220 	bic.w	r2, r3, #32
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<500000; i++);
 8000370:	2300      	movs	r3, #0
 8000372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000374:	e002      	b.n	800037c <main+0x178>
 8000376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000378:	3301      	adds	r3, #1
 800037a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800037c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800037e:	4a41      	ldr	r2, [pc, #260]	; (8000484 <main+0x280>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d9f8      	bls.n	8000376 <main+0x172>
a++;
 8000384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000388:	3301      	adds	r3, #1
 800038a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
while(a<3){
 800038e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000392:	2b02      	cmp	r3, #2
 8000394:	d9d6      	bls.n	8000344 <main+0x140>


while(1){
//verifed buttons on ROW1
	//Configure PA8 IO pin as 0 /Row 1
	*pPortAOutputReg &=~(1<<8);	//R1
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	601a      	str	r2, [r3, #0]
	//verifed But1

	uint32_t C1=(*pPortBInputReg >> 3) & 0x1;	//C1-PB3
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	08db      	lsrs	r3, r3, #3
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
	if(!C1) {
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d12c      	bne.n	800040e <main+0x20a>

		uint8_t a=0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while(a<1){
 80003ba:	e024      	b.n	8000406 <main+0x202>
		//turn ONN the LED
			*pPortAOutputReg |=(1<<5);
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f043 0220 	orr.w	r2, r3, #32
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	601a      	str	r2, [r3, #0]
		for(uint32_t i=0; i<500000; i++);
 80003c8:	2300      	movs	r3, #0
 80003ca:	647b      	str	r3, [r7, #68]	; 0x44
 80003cc:	e002      	b.n	80003d4 <main+0x1d0>
 80003ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003d0:	3301      	adds	r3, #1
 80003d2:	647b      	str	r3, [r7, #68]	; 0x44
 80003d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003d6:	4a2b      	ldr	r2, [pc, #172]	; (8000484 <main+0x280>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d9f8      	bls.n	80003ce <main+0x1ca>
		//turn OFF LED
			*pPortAOutputReg &=~(1<<5);
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f023 0220 	bic.w	r2, r3, #32
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	601a      	str	r2, [r3, #0]
		for(uint32_t i=0; i<500000; i++);
 80003e8:	2300      	movs	r3, #0
 80003ea:	643b      	str	r3, [r7, #64]	; 0x40
 80003ec:	e002      	b.n	80003f4 <main+0x1f0>
 80003ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003f0:	3301      	adds	r3, #1
 80003f2:	643b      	str	r3, [r7, #64]	; 0x40
 80003f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003f6:	4a23      	ldr	r2, [pc, #140]	; (8000484 <main+0x280>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d9f8      	bls.n	80003ee <main+0x1ea>
	a++;
 80003fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000400:	3301      	adds	r3, #1
 8000402:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while(a<1){
 8000406:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0d6      	beq.n	80003bc <main+0x1b8>

//		printf("But 1 =ON\n");//fflush(stdout);
//	for(uint32_t i=0; i<300000; i++);
	};//end if

	uint32_t C2=(*pPortAInputReg >> 10) & 0x1;	//C2-PA10
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	0a9b      	lsrs	r3, r3, #10
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	60bb      	str	r3, [r7, #8]
	if(!C2){
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d143      	bne.n	80004a8 <main+0x2a4>

		uint8_t a=0;
 8000420:	2300      	movs	r3, #0
 8000422:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		while(a<2){
 8000426:	e03b      	b.n	80004a0 <main+0x29c>
			//turn ONN the LED
				*pPortAOutputReg |=(1<<5);
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f043 0220 	orr.w	r2, r3, #32
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	601a      	str	r2, [r3, #0]
			for(uint32_t i=0; i<500000; i++);
 8000434:	2300      	movs	r3, #0
 8000436:	63bb      	str	r3, [r7, #56]	; 0x38
 8000438:	e002      	b.n	8000440 <main+0x23c>
 800043a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800043c:	3301      	adds	r3, #1
 800043e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000442:	4a10      	ldr	r2, [pc, #64]	; (8000484 <main+0x280>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d9f8      	bls.n	800043a <main+0x236>
			//turn OFF LED
				*pPortAOutputReg &=~(1<<5);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f023 0220 	bic.w	r2, r3, #32
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	601a      	str	r2, [r3, #0]
			for(uint32_t i=0; i<500000; i++);
 8000454:	2300      	movs	r3, #0
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
 8000458:	e019      	b.n	800048e <main+0x28a>
 800045a:	bf00      	nop
 800045c:	08001020 	.word	0x08001020
 8000460:	40023830 	.word	0x40023830
 8000464:	40020000 	.word	0x40020000
 8000468:	40020400 	.word	0x40020400
 800046c:	4002000c 	.word	0x4002000c
 8000470:	4002040c 	.word	0x4002040c
 8000474:	40020010 	.word	0x40020010
 8000478:	40020410 	.word	0x40020410
 800047c:	40020014 	.word	0x40020014
 8000480:	40020414 	.word	0x40020414
 8000484:	0007a11f 	.word	0x0007a11f
 8000488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800048a:	3301      	adds	r3, #1
 800048c:	637b      	str	r3, [r7, #52]	; 0x34
 800048e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000490:	4a12      	ldr	r2, [pc, #72]	; (80004dc <main+0x2d8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d9f8      	bls.n	8000488 <main+0x284>
		a++;
 8000496:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800049a:	3301      	adds	r3, #1
 800049c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		while(a<2){
 80004a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d9bf      	bls.n	8000428 <main+0x224>

//		printf("But 2 =ON\n");//fflush(stdout);
//	for(uint32_t i=0; i<300000; i++);
	};//end if

	uint32_t C3=(*pPortAInputReg >> 2) & 0x1;	//C3-PA2
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	089b      	lsrs	r3, r3, #2
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
	if(!C3){
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d102      	bne.n	80004c0 <main+0x2bc>
			printf("But 3 =ON\n");//fflush(stdout);
 80004ba:	4809      	ldr	r0, [pc, #36]	; (80004e0 <main+0x2dc>)
 80004bc:	f000 f998 	bl	80007f0 <puts>
	//	for(uint32_t i=0; i<300000; i++);
		};//end if

	uint32_t C4=(*pPortAInputReg >> 3) & 0x1;	//C4-PA3
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	08db      	lsrs	r3, r3, #3
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	603b      	str	r3, [r7, #0]
	if(!C4){
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f47f af61 	bne.w	8000396 <main+0x192>

			printf("But A =ON\n");//fflush(stdout);
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <main+0x2e0>)
 80004d6:	f000 f98b 	bl	80007f0 <puts>
while(1){
 80004da:	e75c      	b.n	8000396 <main+0x192>
 80004dc:	0007a11f 	.word	0x0007a11f
 80004e0:	08001030 	.word	0x08001030
 80004e4:	0800103c 	.word	0x0800103c

080004e8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <ITM_SendChar+0x48>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <ITM_SendChar+0x48>)
 80004f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <ITM_SendChar+0x4c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <ITM_SendChar+0x4c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800050a:	bf00      	nop
 800050c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f8      	beq.n	800050c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800051a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	6013      	str	r3, [r2, #0]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000edfc 	.word	0xe000edfc
 8000534:	e0000e00 	.word	0xe0000e00

08000538 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	e00a      	b.n	8000560 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800054a:	f3af 8000 	nop.w
 800054e:	4601      	mov	r1, r0
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	60ba      	str	r2, [r7, #8]
 8000556:	b2ca      	uxtb	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3301      	adds	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	dbf0      	blt.n	800054a <_read+0x12>
	}

return len;
 8000568:	687b      	ldr	r3, [r7, #4]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b086      	sub	sp, #24
 8000576:	af00      	add	r7, sp, #0
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	e009      	b.n	8000598 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60ba      	str	r2, [r7, #8]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ffab 	bl	80004e8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	3301      	adds	r3, #1
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	697a      	ldr	r2, [r7, #20]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	429a      	cmp	r2, r3
 800059e:	dbf1      	blt.n	8000584 <_write+0x12>
	}
	return len;
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <_close>:

int _close(int file)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
	return -1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d2:	605a      	str	r2, [r3, #4]
	return 0;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <_isatty>:

int _isatty(int file)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	return 1;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	return 0;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <_sbrk+0x5c>)
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <_sbrk+0x60>)
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <_sbrk+0x64>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <_sbrk+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	d207      	bcs.n	8000654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000644:	f000 f846 	bl	80006d4 <__errno>
 8000648:	4602      	mov	r2, r0
 800064a:	230c      	movs	r3, #12
 800064c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e009      	b.n	8000668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <_sbrk+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20020000 	.word	0x20020000
 8000674:	00000400 	.word	0x00000400
 8000678:	20000080 	.word	0x20000080
 800067c:	20000090 	.word	0x20000090

08000680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000682:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000684:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 800068a:	490d      	ldr	r1, [pc, #52]	; (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a0:	4c0a      	ldr	r4, [pc, #40]	; (80006cc <LoopForever+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ae:	f000 f817 	bl	80006e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fda7 	bl	8000204 <main>

080006b6 <LoopForever>:

LoopForever:
    b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   r0, =_estack
 80006b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006c4:	080010b4 	.word	0x080010b4
  ldr r2, =_sbss
 80006c8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006cc:	20000090 	.word	0x20000090

080006d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC_IRQHandler>
	...

080006d4 <__errno>:
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <__errno+0x8>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000000 	.word	0x20000000

080006e0 <__libc_init_array>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	4e0d      	ldr	r6, [pc, #52]	; (8000718 <__libc_init_array+0x38>)
 80006e4:	4c0d      	ldr	r4, [pc, #52]	; (800071c <__libc_init_array+0x3c>)
 80006e6:	1ba4      	subs	r4, r4, r6
 80006e8:	10a4      	asrs	r4, r4, #2
 80006ea:	2500      	movs	r5, #0
 80006ec:	42a5      	cmp	r5, r4
 80006ee:	d109      	bne.n	8000704 <__libc_init_array+0x24>
 80006f0:	4e0b      	ldr	r6, [pc, #44]	; (8000720 <__libc_init_array+0x40>)
 80006f2:	4c0c      	ldr	r4, [pc, #48]	; (8000724 <__libc_init_array+0x44>)
 80006f4:	f000 fc88 	bl	8001008 <_init>
 80006f8:	1ba4      	subs	r4, r4, r6
 80006fa:	10a4      	asrs	r4, r4, #2
 80006fc:	2500      	movs	r5, #0
 80006fe:	42a5      	cmp	r5, r4
 8000700:	d105      	bne.n	800070e <__libc_init_array+0x2e>
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000708:	4798      	blx	r3
 800070a:	3501      	adds	r5, #1
 800070c:	e7ee      	b.n	80006ec <__libc_init_array+0xc>
 800070e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000712:	4798      	blx	r3
 8000714:	3501      	adds	r5, #1
 8000716:	e7f2      	b.n	80006fe <__libc_init_array+0x1e>
 8000718:	080010ac 	.word	0x080010ac
 800071c:	080010ac 	.word	0x080010ac
 8000720:	080010ac 	.word	0x080010ac
 8000724:	080010b0 	.word	0x080010b0

08000728 <memset>:
 8000728:	4402      	add	r2, r0
 800072a:	4603      	mov	r3, r0
 800072c:	4293      	cmp	r3, r2
 800072e:	d100      	bne.n	8000732 <memset+0xa>
 8000730:	4770      	bx	lr
 8000732:	f803 1b01 	strb.w	r1, [r3], #1
 8000736:	e7f9      	b.n	800072c <memset+0x4>

08000738 <_puts_r>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	460e      	mov	r6, r1
 800073c:	4605      	mov	r5, r0
 800073e:	b118      	cbz	r0, 8000748 <_puts_r+0x10>
 8000740:	6983      	ldr	r3, [r0, #24]
 8000742:	b90b      	cbnz	r3, 8000748 <_puts_r+0x10>
 8000744:	f000 fa0c 	bl	8000b60 <__sinit>
 8000748:	69ab      	ldr	r3, [r5, #24]
 800074a:	68ac      	ldr	r4, [r5, #8]
 800074c:	b913      	cbnz	r3, 8000754 <_puts_r+0x1c>
 800074e:	4628      	mov	r0, r5
 8000750:	f000 fa06 	bl	8000b60 <__sinit>
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <_puts_r+0xac>)
 8000756:	429c      	cmp	r4, r3
 8000758:	d117      	bne.n	800078a <_puts_r+0x52>
 800075a:	686c      	ldr	r4, [r5, #4]
 800075c:	89a3      	ldrh	r3, [r4, #12]
 800075e:	071b      	lsls	r3, r3, #28
 8000760:	d51d      	bpl.n	800079e <_puts_r+0x66>
 8000762:	6923      	ldr	r3, [r4, #16]
 8000764:	b1db      	cbz	r3, 800079e <_puts_r+0x66>
 8000766:	3e01      	subs	r6, #1
 8000768:	68a3      	ldr	r3, [r4, #8]
 800076a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800076e:	3b01      	subs	r3, #1
 8000770:	60a3      	str	r3, [r4, #8]
 8000772:	b9e9      	cbnz	r1, 80007b0 <_puts_r+0x78>
 8000774:	2b00      	cmp	r3, #0
 8000776:	da2e      	bge.n	80007d6 <_puts_r+0x9e>
 8000778:	4622      	mov	r2, r4
 800077a:	210a      	movs	r1, #10
 800077c:	4628      	mov	r0, r5
 800077e:	f000 f83f 	bl	8000800 <__swbuf_r>
 8000782:	3001      	adds	r0, #1
 8000784:	d011      	beq.n	80007aa <_puts_r+0x72>
 8000786:	200a      	movs	r0, #10
 8000788:	e011      	b.n	80007ae <_puts_r+0x76>
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <_puts_r+0xb0>)
 800078c:	429c      	cmp	r4, r3
 800078e:	d101      	bne.n	8000794 <_puts_r+0x5c>
 8000790:	68ac      	ldr	r4, [r5, #8]
 8000792:	e7e3      	b.n	800075c <_puts_r+0x24>
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <_puts_r+0xb4>)
 8000796:	429c      	cmp	r4, r3
 8000798:	bf08      	it	eq
 800079a:	68ec      	ldreq	r4, [r5, #12]
 800079c:	e7de      	b.n	800075c <_puts_r+0x24>
 800079e:	4621      	mov	r1, r4
 80007a0:	4628      	mov	r0, r5
 80007a2:	f000 f87f 	bl	80008a4 <__swsetup_r>
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d0dd      	beq.n	8000766 <_puts_r+0x2e>
 80007aa:	f04f 30ff 	mov.w	r0, #4294967295
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	da04      	bge.n	80007be <_puts_r+0x86>
 80007b4:	69a2      	ldr	r2, [r4, #24]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dc06      	bgt.n	80007c8 <_puts_r+0x90>
 80007ba:	290a      	cmp	r1, #10
 80007bc:	d004      	beq.n	80007c8 <_puts_r+0x90>
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	6022      	str	r2, [r4, #0]
 80007c4:	7019      	strb	r1, [r3, #0]
 80007c6:	e7cf      	b.n	8000768 <_puts_r+0x30>
 80007c8:	4622      	mov	r2, r4
 80007ca:	4628      	mov	r0, r5
 80007cc:	f000 f818 	bl	8000800 <__swbuf_r>
 80007d0:	3001      	adds	r0, #1
 80007d2:	d1c9      	bne.n	8000768 <_puts_r+0x30>
 80007d4:	e7e9      	b.n	80007aa <_puts_r+0x72>
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	200a      	movs	r0, #10
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	6022      	str	r2, [r4, #0]
 80007de:	7018      	strb	r0, [r3, #0]
 80007e0:	e7e5      	b.n	80007ae <_puts_r+0x76>
 80007e2:	bf00      	nop
 80007e4:	0800106c 	.word	0x0800106c
 80007e8:	0800108c 	.word	0x0800108c
 80007ec:	0800104c 	.word	0x0800104c

080007f0 <puts>:
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <puts+0xc>)
 80007f2:	4601      	mov	r1, r0
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f7ff bf9f 	b.w	8000738 <_puts_r>
 80007fa:	bf00      	nop
 80007fc:	20000000 	.word	0x20000000

08000800 <__swbuf_r>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	460e      	mov	r6, r1
 8000804:	4614      	mov	r4, r2
 8000806:	4605      	mov	r5, r0
 8000808:	b118      	cbz	r0, 8000812 <__swbuf_r+0x12>
 800080a:	6983      	ldr	r3, [r0, #24]
 800080c:	b90b      	cbnz	r3, 8000812 <__swbuf_r+0x12>
 800080e:	f000 f9a7 	bl	8000b60 <__sinit>
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <__swbuf_r+0x98>)
 8000814:	429c      	cmp	r4, r3
 8000816:	d12a      	bne.n	800086e <__swbuf_r+0x6e>
 8000818:	686c      	ldr	r4, [r5, #4]
 800081a:	69a3      	ldr	r3, [r4, #24]
 800081c:	60a3      	str	r3, [r4, #8]
 800081e:	89a3      	ldrh	r3, [r4, #12]
 8000820:	071a      	lsls	r2, r3, #28
 8000822:	d52e      	bpl.n	8000882 <__swbuf_r+0x82>
 8000824:	6923      	ldr	r3, [r4, #16]
 8000826:	b363      	cbz	r3, 8000882 <__swbuf_r+0x82>
 8000828:	6923      	ldr	r3, [r4, #16]
 800082a:	6820      	ldr	r0, [r4, #0]
 800082c:	1ac0      	subs	r0, r0, r3
 800082e:	6963      	ldr	r3, [r4, #20]
 8000830:	b2f6      	uxtb	r6, r6
 8000832:	4283      	cmp	r3, r0
 8000834:	4637      	mov	r7, r6
 8000836:	dc04      	bgt.n	8000842 <__swbuf_r+0x42>
 8000838:	4621      	mov	r1, r4
 800083a:	4628      	mov	r0, r5
 800083c:	f000 f926 	bl	8000a8c <_fflush_r>
 8000840:	bb28      	cbnz	r0, 800088e <__swbuf_r+0x8e>
 8000842:	68a3      	ldr	r3, [r4, #8]
 8000844:	3b01      	subs	r3, #1
 8000846:	60a3      	str	r3, [r4, #8]
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	6022      	str	r2, [r4, #0]
 800084e:	701e      	strb	r6, [r3, #0]
 8000850:	6963      	ldr	r3, [r4, #20]
 8000852:	3001      	adds	r0, #1
 8000854:	4283      	cmp	r3, r0
 8000856:	d004      	beq.n	8000862 <__swbuf_r+0x62>
 8000858:	89a3      	ldrh	r3, [r4, #12]
 800085a:	07db      	lsls	r3, r3, #31
 800085c:	d519      	bpl.n	8000892 <__swbuf_r+0x92>
 800085e:	2e0a      	cmp	r6, #10
 8000860:	d117      	bne.n	8000892 <__swbuf_r+0x92>
 8000862:	4621      	mov	r1, r4
 8000864:	4628      	mov	r0, r5
 8000866:	f000 f911 	bl	8000a8c <_fflush_r>
 800086a:	b190      	cbz	r0, 8000892 <__swbuf_r+0x92>
 800086c:	e00f      	b.n	800088e <__swbuf_r+0x8e>
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <__swbuf_r+0x9c>)
 8000870:	429c      	cmp	r4, r3
 8000872:	d101      	bne.n	8000878 <__swbuf_r+0x78>
 8000874:	68ac      	ldr	r4, [r5, #8]
 8000876:	e7d0      	b.n	800081a <__swbuf_r+0x1a>
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <__swbuf_r+0xa0>)
 800087a:	429c      	cmp	r4, r3
 800087c:	bf08      	it	eq
 800087e:	68ec      	ldreq	r4, [r5, #12]
 8000880:	e7cb      	b.n	800081a <__swbuf_r+0x1a>
 8000882:	4621      	mov	r1, r4
 8000884:	4628      	mov	r0, r5
 8000886:	f000 f80d 	bl	80008a4 <__swsetup_r>
 800088a:	2800      	cmp	r0, #0
 800088c:	d0cc      	beq.n	8000828 <__swbuf_r+0x28>
 800088e:	f04f 37ff 	mov.w	r7, #4294967295
 8000892:	4638      	mov	r0, r7
 8000894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000896:	bf00      	nop
 8000898:	0800106c 	.word	0x0800106c
 800089c:	0800108c 	.word	0x0800108c
 80008a0:	0800104c 	.word	0x0800104c

080008a4 <__swsetup_r>:
 80008a4:	4b32      	ldr	r3, [pc, #200]	; (8000970 <__swsetup_r+0xcc>)
 80008a6:	b570      	push	{r4, r5, r6, lr}
 80008a8:	681d      	ldr	r5, [r3, #0]
 80008aa:	4606      	mov	r6, r0
 80008ac:	460c      	mov	r4, r1
 80008ae:	b125      	cbz	r5, 80008ba <__swsetup_r+0x16>
 80008b0:	69ab      	ldr	r3, [r5, #24]
 80008b2:	b913      	cbnz	r3, 80008ba <__swsetup_r+0x16>
 80008b4:	4628      	mov	r0, r5
 80008b6:	f000 f953 	bl	8000b60 <__sinit>
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <__swsetup_r+0xd0>)
 80008bc:	429c      	cmp	r4, r3
 80008be:	d10f      	bne.n	80008e0 <__swsetup_r+0x3c>
 80008c0:	686c      	ldr	r4, [r5, #4]
 80008c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	0715      	lsls	r5, r2, #28
 80008ca:	d42c      	bmi.n	8000926 <__swsetup_r+0x82>
 80008cc:	06d0      	lsls	r0, r2, #27
 80008ce:	d411      	bmi.n	80008f4 <__swsetup_r+0x50>
 80008d0:	2209      	movs	r2, #9
 80008d2:	6032      	str	r2, [r6, #0]
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	81a3      	strh	r3, [r4, #12]
 80008da:	f04f 30ff 	mov.w	r0, #4294967295
 80008de:	e03e      	b.n	800095e <__swsetup_r+0xba>
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <__swsetup_r+0xd4>)
 80008e2:	429c      	cmp	r4, r3
 80008e4:	d101      	bne.n	80008ea <__swsetup_r+0x46>
 80008e6:	68ac      	ldr	r4, [r5, #8]
 80008e8:	e7eb      	b.n	80008c2 <__swsetup_r+0x1e>
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <__swsetup_r+0xd8>)
 80008ec:	429c      	cmp	r4, r3
 80008ee:	bf08      	it	eq
 80008f0:	68ec      	ldreq	r4, [r5, #12]
 80008f2:	e7e6      	b.n	80008c2 <__swsetup_r+0x1e>
 80008f4:	0751      	lsls	r1, r2, #29
 80008f6:	d512      	bpl.n	800091e <__swsetup_r+0x7a>
 80008f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008fa:	b141      	cbz	r1, 800090e <__swsetup_r+0x6a>
 80008fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000900:	4299      	cmp	r1, r3
 8000902:	d002      	beq.n	800090a <__swsetup_r+0x66>
 8000904:	4630      	mov	r0, r6
 8000906:	f000 fa19 	bl	8000d3c <_free_r>
 800090a:	2300      	movs	r3, #0
 800090c:	6363      	str	r3, [r4, #52]	; 0x34
 800090e:	89a3      	ldrh	r3, [r4, #12]
 8000910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000914:	81a3      	strh	r3, [r4, #12]
 8000916:	2300      	movs	r3, #0
 8000918:	6063      	str	r3, [r4, #4]
 800091a:	6923      	ldr	r3, [r4, #16]
 800091c:	6023      	str	r3, [r4, #0]
 800091e:	89a3      	ldrh	r3, [r4, #12]
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	81a3      	strh	r3, [r4, #12]
 8000926:	6923      	ldr	r3, [r4, #16]
 8000928:	b94b      	cbnz	r3, 800093e <__swsetup_r+0x9a>
 800092a:	89a3      	ldrh	r3, [r4, #12]
 800092c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000934:	d003      	beq.n	800093e <__swsetup_r+0x9a>
 8000936:	4621      	mov	r1, r4
 8000938:	4630      	mov	r0, r6
 800093a:	f000 f9bf 	bl	8000cbc <__smakebuf_r>
 800093e:	89a2      	ldrh	r2, [r4, #12]
 8000940:	f012 0301 	ands.w	r3, r2, #1
 8000944:	d00c      	beq.n	8000960 <__swsetup_r+0xbc>
 8000946:	2300      	movs	r3, #0
 8000948:	60a3      	str	r3, [r4, #8]
 800094a:	6963      	ldr	r3, [r4, #20]
 800094c:	425b      	negs	r3, r3
 800094e:	61a3      	str	r3, [r4, #24]
 8000950:	6923      	ldr	r3, [r4, #16]
 8000952:	b953      	cbnz	r3, 800096a <__swsetup_r+0xc6>
 8000954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000958:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800095c:	d1ba      	bne.n	80008d4 <__swsetup_r+0x30>
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	0792      	lsls	r2, r2, #30
 8000962:	bf58      	it	pl
 8000964:	6963      	ldrpl	r3, [r4, #20]
 8000966:	60a3      	str	r3, [r4, #8]
 8000968:	e7f2      	b.n	8000950 <__swsetup_r+0xac>
 800096a:	2000      	movs	r0, #0
 800096c:	e7f7      	b.n	800095e <__swsetup_r+0xba>
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000
 8000974:	0800106c 	.word	0x0800106c
 8000978:	0800108c 	.word	0x0800108c
 800097c:	0800104c 	.word	0x0800104c

08000980 <__sflush_r>:
 8000980:	898a      	ldrh	r2, [r1, #12]
 8000982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000986:	4605      	mov	r5, r0
 8000988:	0710      	lsls	r0, r2, #28
 800098a:	460c      	mov	r4, r1
 800098c:	d458      	bmi.n	8000a40 <__sflush_r+0xc0>
 800098e:	684b      	ldr	r3, [r1, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	dc05      	bgt.n	80009a0 <__sflush_r+0x20>
 8000994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000996:	2b00      	cmp	r3, #0
 8000998:	dc02      	bgt.n	80009a0 <__sflush_r+0x20>
 800099a:	2000      	movs	r0, #0
 800099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d0f9      	beq.n	800099a <__sflush_r+0x1a>
 80009a6:	2300      	movs	r3, #0
 80009a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009ac:	682f      	ldr	r7, [r5, #0]
 80009ae:	6a21      	ldr	r1, [r4, #32]
 80009b0:	602b      	str	r3, [r5, #0]
 80009b2:	d032      	beq.n	8000a1a <__sflush_r+0x9a>
 80009b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009b6:	89a3      	ldrh	r3, [r4, #12]
 80009b8:	075a      	lsls	r2, r3, #29
 80009ba:	d505      	bpl.n	80009c8 <__sflush_r+0x48>
 80009bc:	6863      	ldr	r3, [r4, #4]
 80009be:	1ac0      	subs	r0, r0, r3
 80009c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009c2:	b10b      	cbz	r3, 80009c8 <__sflush_r+0x48>
 80009c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009c6:	1ac0      	subs	r0, r0, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	4602      	mov	r2, r0
 80009cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009ce:	6a21      	ldr	r1, [r4, #32]
 80009d0:	4628      	mov	r0, r5
 80009d2:	47b0      	blx	r6
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	89a3      	ldrh	r3, [r4, #12]
 80009d8:	d106      	bne.n	80009e8 <__sflush_r+0x68>
 80009da:	6829      	ldr	r1, [r5, #0]
 80009dc:	291d      	cmp	r1, #29
 80009de:	d848      	bhi.n	8000a72 <__sflush_r+0xf2>
 80009e0:	4a29      	ldr	r2, [pc, #164]	; (8000a88 <__sflush_r+0x108>)
 80009e2:	40ca      	lsrs	r2, r1
 80009e4:	07d6      	lsls	r6, r2, #31
 80009e6:	d544      	bpl.n	8000a72 <__sflush_r+0xf2>
 80009e8:	2200      	movs	r2, #0
 80009ea:	6062      	str	r2, [r4, #4]
 80009ec:	04d9      	lsls	r1, r3, #19
 80009ee:	6922      	ldr	r2, [r4, #16]
 80009f0:	6022      	str	r2, [r4, #0]
 80009f2:	d504      	bpl.n	80009fe <__sflush_r+0x7e>
 80009f4:	1c42      	adds	r2, r0, #1
 80009f6:	d101      	bne.n	80009fc <__sflush_r+0x7c>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	b903      	cbnz	r3, 80009fe <__sflush_r+0x7e>
 80009fc:	6560      	str	r0, [r4, #84]	; 0x54
 80009fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a00:	602f      	str	r7, [r5, #0]
 8000a02:	2900      	cmp	r1, #0
 8000a04:	d0c9      	beq.n	800099a <__sflush_r+0x1a>
 8000a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a0a:	4299      	cmp	r1, r3
 8000a0c:	d002      	beq.n	8000a14 <__sflush_r+0x94>
 8000a0e:	4628      	mov	r0, r5
 8000a10:	f000 f994 	bl	8000d3c <_free_r>
 8000a14:	2000      	movs	r0, #0
 8000a16:	6360      	str	r0, [r4, #52]	; 0x34
 8000a18:	e7c0      	b.n	800099c <__sflush_r+0x1c>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	47b0      	blx	r6
 8000a20:	1c41      	adds	r1, r0, #1
 8000a22:	d1c8      	bne.n	80009b6 <__sflush_r+0x36>
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0c5      	beq.n	80009b6 <__sflush_r+0x36>
 8000a2a:	2b1d      	cmp	r3, #29
 8000a2c:	d001      	beq.n	8000a32 <__sflush_r+0xb2>
 8000a2e:	2b16      	cmp	r3, #22
 8000a30:	d101      	bne.n	8000a36 <__sflush_r+0xb6>
 8000a32:	602f      	str	r7, [r5, #0]
 8000a34:	e7b1      	b.n	800099a <__sflush_r+0x1a>
 8000a36:	89a3      	ldrh	r3, [r4, #12]
 8000a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3c:	81a3      	strh	r3, [r4, #12]
 8000a3e:	e7ad      	b.n	800099c <__sflush_r+0x1c>
 8000a40:	690f      	ldr	r7, [r1, #16]
 8000a42:	2f00      	cmp	r7, #0
 8000a44:	d0a9      	beq.n	800099a <__sflush_r+0x1a>
 8000a46:	0793      	lsls	r3, r2, #30
 8000a48:	680e      	ldr	r6, [r1, #0]
 8000a4a:	bf08      	it	eq
 8000a4c:	694b      	ldreq	r3, [r1, #20]
 8000a4e:	600f      	str	r7, [r1, #0]
 8000a50:	bf18      	it	ne
 8000a52:	2300      	movne	r3, #0
 8000a54:	eba6 0807 	sub.w	r8, r6, r7
 8000a58:	608b      	str	r3, [r1, #8]
 8000a5a:	f1b8 0f00 	cmp.w	r8, #0
 8000a5e:	dd9c      	ble.n	800099a <__sflush_r+0x1a>
 8000a60:	4643      	mov	r3, r8
 8000a62:	463a      	mov	r2, r7
 8000a64:	6a21      	ldr	r1, [r4, #32]
 8000a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a68:	4628      	mov	r0, r5
 8000a6a:	47b0      	blx	r6
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	dc06      	bgt.n	8000a7e <__sflush_r+0xfe>
 8000a70:	89a3      	ldrh	r3, [r4, #12]
 8000a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a76:	81a3      	strh	r3, [r4, #12]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	e78e      	b.n	800099c <__sflush_r+0x1c>
 8000a7e:	4407      	add	r7, r0
 8000a80:	eba8 0800 	sub.w	r8, r8, r0
 8000a84:	e7e9      	b.n	8000a5a <__sflush_r+0xda>
 8000a86:	bf00      	nop
 8000a88:	20400001 	.word	0x20400001

08000a8c <_fflush_r>:
 8000a8c:	b538      	push	{r3, r4, r5, lr}
 8000a8e:	690b      	ldr	r3, [r1, #16]
 8000a90:	4605      	mov	r5, r0
 8000a92:	460c      	mov	r4, r1
 8000a94:	b1db      	cbz	r3, 8000ace <_fflush_r+0x42>
 8000a96:	b118      	cbz	r0, 8000aa0 <_fflush_r+0x14>
 8000a98:	6983      	ldr	r3, [r0, #24]
 8000a9a:	b90b      	cbnz	r3, 8000aa0 <_fflush_r+0x14>
 8000a9c:	f000 f860 	bl	8000b60 <__sinit>
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <_fflush_r+0x48>)
 8000aa2:	429c      	cmp	r4, r3
 8000aa4:	d109      	bne.n	8000aba <_fflush_r+0x2e>
 8000aa6:	686c      	ldr	r4, [r5, #4]
 8000aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aac:	b17b      	cbz	r3, 8000ace <_fflush_r+0x42>
 8000aae:	4621      	mov	r1, r4
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ab6:	f7ff bf63 	b.w	8000980 <__sflush_r>
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_fflush_r+0x4c>)
 8000abc:	429c      	cmp	r4, r3
 8000abe:	d101      	bne.n	8000ac4 <_fflush_r+0x38>
 8000ac0:	68ac      	ldr	r4, [r5, #8]
 8000ac2:	e7f1      	b.n	8000aa8 <_fflush_r+0x1c>
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <_fflush_r+0x50>)
 8000ac6:	429c      	cmp	r4, r3
 8000ac8:	bf08      	it	eq
 8000aca:	68ec      	ldreq	r4, [r5, #12]
 8000acc:	e7ec      	b.n	8000aa8 <_fflush_r+0x1c>
 8000ace:	2000      	movs	r0, #0
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	0800106c 	.word	0x0800106c
 8000ad8:	0800108c 	.word	0x0800108c
 8000adc:	0800104c 	.word	0x0800104c

08000ae0 <std>:
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	b510      	push	{r4, lr}
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8000aea:	6083      	str	r3, [r0, #8]
 8000aec:	8181      	strh	r1, [r0, #12]
 8000aee:	6643      	str	r3, [r0, #100]	; 0x64
 8000af0:	81c2      	strh	r2, [r0, #14]
 8000af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000af6:	6183      	str	r3, [r0, #24]
 8000af8:	4619      	mov	r1, r3
 8000afa:	2208      	movs	r2, #8
 8000afc:	305c      	adds	r0, #92	; 0x5c
 8000afe:	f7ff fe13 	bl	8000728 <memset>
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <std+0x38>)
 8000b04:	6263      	str	r3, [r4, #36]	; 0x24
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <std+0x3c>)
 8000b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <std+0x40>)
 8000b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <std+0x44>)
 8000b10:	6224      	str	r4, [r4, #32]
 8000b12:	6323      	str	r3, [r4, #48]	; 0x30
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	bf00      	nop
 8000b18:	08000ead 	.word	0x08000ead
 8000b1c:	08000ecf 	.word	0x08000ecf
 8000b20:	08000f07 	.word	0x08000f07
 8000b24:	08000f2b 	.word	0x08000f2b

08000b28 <_cleanup_r>:
 8000b28:	4901      	ldr	r1, [pc, #4]	; (8000b30 <_cleanup_r+0x8>)
 8000b2a:	f000 b885 	b.w	8000c38 <_fwalk_reent>
 8000b2e:	bf00      	nop
 8000b30:	08000a8d 	.word	0x08000a8d

08000b34 <__sfmoreglue>:
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	1e4a      	subs	r2, r1, #1
 8000b38:	2568      	movs	r5, #104	; 0x68
 8000b3a:	4355      	muls	r5, r2
 8000b3c:	460e      	mov	r6, r1
 8000b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b42:	f000 f949 	bl	8000dd8 <_malloc_r>
 8000b46:	4604      	mov	r4, r0
 8000b48:	b140      	cbz	r0, 8000b5c <__sfmoreglue+0x28>
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	e9c0 1600 	strd	r1, r6, [r0]
 8000b50:	300c      	adds	r0, #12
 8000b52:	60a0      	str	r0, [r4, #8]
 8000b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b58:	f7ff fde6 	bl	8000728 <memset>
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}

08000b60 <__sinit>:
 8000b60:	6983      	ldr	r3, [r0, #24]
 8000b62:	b510      	push	{r4, lr}
 8000b64:	4604      	mov	r4, r0
 8000b66:	bb33      	cbnz	r3, 8000bb6 <__sinit+0x56>
 8000b68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000b6c:	6503      	str	r3, [r0, #80]	; 0x50
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <__sinit+0x58>)
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <__sinit+0x5c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6282      	str	r2, [r0, #40]	; 0x28
 8000b76:	4298      	cmp	r0, r3
 8000b78:	bf04      	itt	eq
 8000b7a:	2301      	moveq	r3, #1
 8000b7c:	6183      	streq	r3, [r0, #24]
 8000b7e:	f000 f81f 	bl	8000bc0 <__sfp>
 8000b82:	6060      	str	r0, [r4, #4]
 8000b84:	4620      	mov	r0, r4
 8000b86:	f000 f81b 	bl	8000bc0 <__sfp>
 8000b8a:	60a0      	str	r0, [r4, #8]
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f000 f817 	bl	8000bc0 <__sfp>
 8000b92:	2200      	movs	r2, #0
 8000b94:	60e0      	str	r0, [r4, #12]
 8000b96:	2104      	movs	r1, #4
 8000b98:	6860      	ldr	r0, [r4, #4]
 8000b9a:	f7ff ffa1 	bl	8000ae0 <std>
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2109      	movs	r1, #9
 8000ba2:	68a0      	ldr	r0, [r4, #8]
 8000ba4:	f7ff ff9c 	bl	8000ae0 <std>
 8000ba8:	2202      	movs	r2, #2
 8000baa:	2112      	movs	r1, #18
 8000bac:	68e0      	ldr	r0, [r4, #12]
 8000bae:	f7ff ff97 	bl	8000ae0 <std>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61a3      	str	r3, [r4, #24]
 8000bb6:	bd10      	pop	{r4, pc}
 8000bb8:	08001048 	.word	0x08001048
 8000bbc:	08000b29 	.word	0x08000b29

08000bc0 <__sfp>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <__sfp+0x70>)
 8000bc4:	681e      	ldr	r6, [r3, #0]
 8000bc6:	69b3      	ldr	r3, [r6, #24]
 8000bc8:	4607      	mov	r7, r0
 8000bca:	b913      	cbnz	r3, 8000bd2 <__sfp+0x12>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f7ff ffc7 	bl	8000b60 <__sinit>
 8000bd2:	3648      	adds	r6, #72	; 0x48
 8000bd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	d503      	bpl.n	8000be4 <__sfp+0x24>
 8000bdc:	6833      	ldr	r3, [r6, #0]
 8000bde:	b133      	cbz	r3, 8000bee <__sfp+0x2e>
 8000be0:	6836      	ldr	r6, [r6, #0]
 8000be2:	e7f7      	b.n	8000bd4 <__sfp+0x14>
 8000be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000be8:	b16d      	cbz	r5, 8000c06 <__sfp+0x46>
 8000bea:	3468      	adds	r4, #104	; 0x68
 8000bec:	e7f4      	b.n	8000bd8 <__sfp+0x18>
 8000bee:	2104      	movs	r1, #4
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	f7ff ff9f 	bl	8000b34 <__sfmoreglue>
 8000bf6:	6030      	str	r0, [r6, #0]
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d1f1      	bne.n	8000be0 <__sfp+0x20>
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	4604      	mov	r4, r0
 8000c02:	4620      	mov	r0, r4
 8000c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <__sfp+0x74>)
 8000c08:	6665      	str	r5, [r4, #100]	; 0x64
 8000c0a:	e9c4 5500 	strd	r5, r5, [r4]
 8000c0e:	60a5      	str	r5, [r4, #8]
 8000c10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000c14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000c18:	2208      	movs	r2, #8
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c20:	f7ff fd82 	bl	8000728 <memset>
 8000c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c2c:	e7e9      	b.n	8000c02 <__sfp+0x42>
 8000c2e:	bf00      	nop
 8000c30:	08001048 	.word	0x08001048
 8000c34:	ffff0001 	.word	0xffff0001

08000c38 <_fwalk_reent>:
 8000c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c3c:	4680      	mov	r8, r0
 8000c3e:	4689      	mov	r9, r1
 8000c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c44:	2600      	movs	r6, #0
 8000c46:	b914      	cbnz	r4, 8000c4e <_fwalk_reent+0x16>
 8000c48:	4630      	mov	r0, r6
 8000c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000c52:	3f01      	subs	r7, #1
 8000c54:	d501      	bpl.n	8000c5a <_fwalk_reent+0x22>
 8000c56:	6824      	ldr	r4, [r4, #0]
 8000c58:	e7f5      	b.n	8000c46 <_fwalk_reent+0xe>
 8000c5a:	89ab      	ldrh	r3, [r5, #12]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d907      	bls.n	8000c70 <_fwalk_reent+0x38>
 8000c60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c64:	3301      	adds	r3, #1
 8000c66:	d003      	beq.n	8000c70 <_fwalk_reent+0x38>
 8000c68:	4629      	mov	r1, r5
 8000c6a:	4640      	mov	r0, r8
 8000c6c:	47c8      	blx	r9
 8000c6e:	4306      	orrs	r6, r0
 8000c70:	3568      	adds	r5, #104	; 0x68
 8000c72:	e7ee      	b.n	8000c52 <_fwalk_reent+0x1a>

08000c74 <__swhatbuf_r>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	460e      	mov	r6, r1
 8000c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	b096      	sub	sp, #88	; 0x58
 8000c80:	4614      	mov	r4, r2
 8000c82:	461d      	mov	r5, r3
 8000c84:	da07      	bge.n	8000c96 <__swhatbuf_r+0x22>
 8000c86:	2300      	movs	r3, #0
 8000c88:	602b      	str	r3, [r5, #0]
 8000c8a:	89b3      	ldrh	r3, [r6, #12]
 8000c8c:	061a      	lsls	r2, r3, #24
 8000c8e:	d410      	bmi.n	8000cb2 <__swhatbuf_r+0x3e>
 8000c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c94:	e00e      	b.n	8000cb4 <__swhatbuf_r+0x40>
 8000c96:	466a      	mov	r2, sp
 8000c98:	f000 f96e 	bl	8000f78 <_fstat_r>
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	dbf2      	blt.n	8000c86 <__swhatbuf_r+0x12>
 8000ca0:	9a01      	ldr	r2, [sp, #4]
 8000ca2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ca6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000caa:	425a      	negs	r2, r3
 8000cac:	415a      	adcs	r2, r3
 8000cae:	602a      	str	r2, [r5, #0]
 8000cb0:	e7ee      	b.n	8000c90 <__swhatbuf_r+0x1c>
 8000cb2:	2340      	movs	r3, #64	; 0x40
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	6023      	str	r3, [r4, #0]
 8000cb8:	b016      	add	sp, #88	; 0x58
 8000cba:	bd70      	pop	{r4, r5, r6, pc}

08000cbc <__smakebuf_r>:
 8000cbc:	898b      	ldrh	r3, [r1, #12]
 8000cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cc0:	079d      	lsls	r5, r3, #30
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460c      	mov	r4, r1
 8000cc6:	d507      	bpl.n	8000cd8 <__smakebuf_r+0x1c>
 8000cc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ccc:	6023      	str	r3, [r4, #0]
 8000cce:	6123      	str	r3, [r4, #16]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	6163      	str	r3, [r4, #20]
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	ab01      	add	r3, sp, #4
 8000cda:	466a      	mov	r2, sp
 8000cdc:	f7ff ffca 	bl	8000c74 <__swhatbuf_r>
 8000ce0:	9900      	ldr	r1, [sp, #0]
 8000ce2:	4605      	mov	r5, r0
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	f000 f877 	bl	8000dd8 <_malloc_r>
 8000cea:	b948      	cbnz	r0, 8000d00 <__smakebuf_r+0x44>
 8000cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cf0:	059a      	lsls	r2, r3, #22
 8000cf2:	d4ef      	bmi.n	8000cd4 <__smakebuf_r+0x18>
 8000cf4:	f023 0303 	bic.w	r3, r3, #3
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	81a3      	strh	r3, [r4, #12]
 8000cfe:	e7e3      	b.n	8000cc8 <__smakebuf_r+0xc>
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <__smakebuf_r+0x7c>)
 8000d02:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d04:	89a3      	ldrh	r3, [r4, #12]
 8000d06:	6020      	str	r0, [r4, #0]
 8000d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0c:	81a3      	strh	r3, [r4, #12]
 8000d0e:	9b00      	ldr	r3, [sp, #0]
 8000d10:	6163      	str	r3, [r4, #20]
 8000d12:	9b01      	ldr	r3, [sp, #4]
 8000d14:	6120      	str	r0, [r4, #16]
 8000d16:	b15b      	cbz	r3, 8000d30 <__smakebuf_r+0x74>
 8000d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f000 f93d 	bl	8000f9c <_isatty_r>
 8000d22:	b128      	cbz	r0, 8000d30 <__smakebuf_r+0x74>
 8000d24:	89a3      	ldrh	r3, [r4, #12]
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	81a3      	strh	r3, [r4, #12]
 8000d30:	89a3      	ldrh	r3, [r4, #12]
 8000d32:	431d      	orrs	r5, r3
 8000d34:	81a5      	strh	r5, [r4, #12]
 8000d36:	e7cd      	b.n	8000cd4 <__smakebuf_r+0x18>
 8000d38:	08000b29 	.word	0x08000b29

08000d3c <_free_r>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	4605      	mov	r5, r0
 8000d40:	2900      	cmp	r1, #0
 8000d42:	d045      	beq.n	8000dd0 <_free_r+0x94>
 8000d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d48:	1f0c      	subs	r4, r1, #4
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bfb8      	it	lt
 8000d4e:	18e4      	addlt	r4, r4, r3
 8000d50:	f000 f946 	bl	8000fe0 <__malloc_lock>
 8000d54:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <_free_r+0x98>)
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	4610      	mov	r0, r2
 8000d5a:	b933      	cbnz	r3, 8000d6a <_free_r+0x2e>
 8000d5c:	6063      	str	r3, [r4, #4]
 8000d5e:	6014      	str	r4, [r2, #0]
 8000d60:	4628      	mov	r0, r5
 8000d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d66:	f000 b93c 	b.w	8000fe2 <__malloc_unlock>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d90c      	bls.n	8000d88 <_free_r+0x4c>
 8000d6e:	6821      	ldr	r1, [r4, #0]
 8000d70:	1862      	adds	r2, r4, r1
 8000d72:	4293      	cmp	r3, r2
 8000d74:	bf04      	itt	eq
 8000d76:	681a      	ldreq	r2, [r3, #0]
 8000d78:	685b      	ldreq	r3, [r3, #4]
 8000d7a:	6063      	str	r3, [r4, #4]
 8000d7c:	bf04      	itt	eq
 8000d7e:	1852      	addeq	r2, r2, r1
 8000d80:	6022      	streq	r2, [r4, #0]
 8000d82:	6004      	str	r4, [r0, #0]
 8000d84:	e7ec      	b.n	8000d60 <_free_r+0x24>
 8000d86:	4613      	mov	r3, r2
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	b10a      	cbz	r2, 8000d90 <_free_r+0x54>
 8000d8c:	42a2      	cmp	r2, r4
 8000d8e:	d9fa      	bls.n	8000d86 <_free_r+0x4a>
 8000d90:	6819      	ldr	r1, [r3, #0]
 8000d92:	1858      	adds	r0, r3, r1
 8000d94:	42a0      	cmp	r0, r4
 8000d96:	d10b      	bne.n	8000db0 <_free_r+0x74>
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	4401      	add	r1, r0
 8000d9c:	1858      	adds	r0, r3, r1
 8000d9e:	4282      	cmp	r2, r0
 8000da0:	6019      	str	r1, [r3, #0]
 8000da2:	d1dd      	bne.n	8000d60 <_free_r+0x24>
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	6852      	ldr	r2, [r2, #4]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	4401      	add	r1, r0
 8000dac:	6019      	str	r1, [r3, #0]
 8000dae:	e7d7      	b.n	8000d60 <_free_r+0x24>
 8000db0:	d902      	bls.n	8000db8 <_free_r+0x7c>
 8000db2:	230c      	movs	r3, #12
 8000db4:	602b      	str	r3, [r5, #0]
 8000db6:	e7d3      	b.n	8000d60 <_free_r+0x24>
 8000db8:	6820      	ldr	r0, [r4, #0]
 8000dba:	1821      	adds	r1, r4, r0
 8000dbc:	428a      	cmp	r2, r1
 8000dbe:	bf04      	itt	eq
 8000dc0:	6811      	ldreq	r1, [r2, #0]
 8000dc2:	6852      	ldreq	r2, [r2, #4]
 8000dc4:	6062      	str	r2, [r4, #4]
 8000dc6:	bf04      	itt	eq
 8000dc8:	1809      	addeq	r1, r1, r0
 8000dca:	6021      	streq	r1, [r4, #0]
 8000dcc:	605c      	str	r4, [r3, #4]
 8000dce:	e7c7      	b.n	8000d60 <_free_r+0x24>
 8000dd0:	bd38      	pop	{r3, r4, r5, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000084 	.word	0x20000084

08000dd8 <_malloc_r>:
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	1ccd      	adds	r5, r1, #3
 8000ddc:	f025 0503 	bic.w	r5, r5, #3
 8000de0:	3508      	adds	r5, #8
 8000de2:	2d0c      	cmp	r5, #12
 8000de4:	bf38      	it	cc
 8000de6:	250c      	movcc	r5, #12
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	4606      	mov	r6, r0
 8000dec:	db01      	blt.n	8000df2 <_malloc_r+0x1a>
 8000dee:	42a9      	cmp	r1, r5
 8000df0:	d903      	bls.n	8000dfa <_malloc_r+0x22>
 8000df2:	230c      	movs	r3, #12
 8000df4:	6033      	str	r3, [r6, #0]
 8000df6:	2000      	movs	r0, #0
 8000df8:	bd70      	pop	{r4, r5, r6, pc}
 8000dfa:	f000 f8f1 	bl	8000fe0 <__malloc_lock>
 8000dfe:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <_malloc_r+0xac>)
 8000e00:	6814      	ldr	r4, [r2, #0]
 8000e02:	4621      	mov	r1, r4
 8000e04:	b991      	cbnz	r1, 8000e2c <_malloc_r+0x54>
 8000e06:	4c20      	ldr	r4, [pc, #128]	; (8000e88 <_malloc_r+0xb0>)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	b91b      	cbnz	r3, 8000e14 <_malloc_r+0x3c>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f000 f83d 	bl	8000e8c <_sbrk_r>
 8000e12:	6020      	str	r0, [r4, #0]
 8000e14:	4629      	mov	r1, r5
 8000e16:	4630      	mov	r0, r6
 8000e18:	f000 f838 	bl	8000e8c <_sbrk_r>
 8000e1c:	1c43      	adds	r3, r0, #1
 8000e1e:	d124      	bne.n	8000e6a <_malloc_r+0x92>
 8000e20:	230c      	movs	r3, #12
 8000e22:	6033      	str	r3, [r6, #0]
 8000e24:	4630      	mov	r0, r6
 8000e26:	f000 f8dc 	bl	8000fe2 <__malloc_unlock>
 8000e2a:	e7e4      	b.n	8000df6 <_malloc_r+0x1e>
 8000e2c:	680b      	ldr	r3, [r1, #0]
 8000e2e:	1b5b      	subs	r3, r3, r5
 8000e30:	d418      	bmi.n	8000e64 <_malloc_r+0x8c>
 8000e32:	2b0b      	cmp	r3, #11
 8000e34:	d90f      	bls.n	8000e56 <_malloc_r+0x7e>
 8000e36:	600b      	str	r3, [r1, #0]
 8000e38:	50cd      	str	r5, [r1, r3]
 8000e3a:	18cc      	adds	r4, r1, r3
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f000 f8d0 	bl	8000fe2 <__malloc_unlock>
 8000e42:	f104 000b 	add.w	r0, r4, #11
 8000e46:	1d23      	adds	r3, r4, #4
 8000e48:	f020 0007 	bic.w	r0, r0, #7
 8000e4c:	1ac3      	subs	r3, r0, r3
 8000e4e:	d0d3      	beq.n	8000df8 <_malloc_r+0x20>
 8000e50:	425a      	negs	r2, r3
 8000e52:	50e2      	str	r2, [r4, r3]
 8000e54:	e7d0      	b.n	8000df8 <_malloc_r+0x20>
 8000e56:	428c      	cmp	r4, r1
 8000e58:	684b      	ldr	r3, [r1, #4]
 8000e5a:	bf16      	itet	ne
 8000e5c:	6063      	strne	r3, [r4, #4]
 8000e5e:	6013      	streq	r3, [r2, #0]
 8000e60:	460c      	movne	r4, r1
 8000e62:	e7eb      	b.n	8000e3c <_malloc_r+0x64>
 8000e64:	460c      	mov	r4, r1
 8000e66:	6849      	ldr	r1, [r1, #4]
 8000e68:	e7cc      	b.n	8000e04 <_malloc_r+0x2c>
 8000e6a:	1cc4      	adds	r4, r0, #3
 8000e6c:	f024 0403 	bic.w	r4, r4, #3
 8000e70:	42a0      	cmp	r0, r4
 8000e72:	d005      	beq.n	8000e80 <_malloc_r+0xa8>
 8000e74:	1a21      	subs	r1, r4, r0
 8000e76:	4630      	mov	r0, r6
 8000e78:	f000 f808 	bl	8000e8c <_sbrk_r>
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d0cf      	beq.n	8000e20 <_malloc_r+0x48>
 8000e80:	6025      	str	r5, [r4, #0]
 8000e82:	e7db      	b.n	8000e3c <_malloc_r+0x64>
 8000e84:	20000084 	.word	0x20000084
 8000e88:	20000088 	.word	0x20000088

08000e8c <_sbrk_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4c06      	ldr	r4, [pc, #24]	; (8000ea8 <_sbrk_r+0x1c>)
 8000e90:	2300      	movs	r3, #0
 8000e92:	4605      	mov	r5, r0
 8000e94:	4608      	mov	r0, r1
 8000e96:	6023      	str	r3, [r4, #0]
 8000e98:	f7ff fbbc 	bl	8000614 <_sbrk>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk_r+0x1a>
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	b103      	cbz	r3, 8000ea6 <_sbrk_r+0x1a>
 8000ea4:	602b      	str	r3, [r5, #0]
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
 8000ea8:	2000008c 	.word	0x2000008c

08000eac <__sread>:
 8000eac:	b510      	push	{r4, lr}
 8000eae:	460c      	mov	r4, r1
 8000eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb4:	f000 f896 	bl	8000fe4 <_read_r>
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	bfab      	itete	ge
 8000ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8000ec0:	181b      	addge	r3, r3, r0
 8000ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ec6:	bfac      	ite	ge
 8000ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eca:	81a3      	strhlt	r3, [r4, #12]
 8000ecc:	bd10      	pop	{r4, pc}

08000ece <__swrite>:
 8000ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed2:	461f      	mov	r7, r3
 8000ed4:	898b      	ldrh	r3, [r1, #12]
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	4605      	mov	r5, r0
 8000eda:	460c      	mov	r4, r1
 8000edc:	4616      	mov	r6, r2
 8000ede:	d505      	bpl.n	8000eec <__swrite+0x1e>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee8:	f000 f868 	bl	8000fbc <_lseek_r>
 8000eec:	89a3      	ldrh	r3, [r4, #12]
 8000eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ef6:	81a3      	strh	r3, [r4, #12]
 8000ef8:	4632      	mov	r2, r6
 8000efa:	463b      	mov	r3, r7
 8000efc:	4628      	mov	r0, r5
 8000efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f02:	f000 b817 	b.w	8000f34 <_write_r>

08000f06 <__sseek>:
 8000f06:	b510      	push	{r4, lr}
 8000f08:	460c      	mov	r4, r1
 8000f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f0e:	f000 f855 	bl	8000fbc <_lseek_r>
 8000f12:	1c43      	adds	r3, r0, #1
 8000f14:	89a3      	ldrh	r3, [r4, #12]
 8000f16:	bf15      	itete	ne
 8000f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f22:	81a3      	strheq	r3, [r4, #12]
 8000f24:	bf18      	it	ne
 8000f26:	81a3      	strhne	r3, [r4, #12]
 8000f28:	bd10      	pop	{r4, pc}

08000f2a <__sclose>:
 8000f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2e:	f000 b813 	b.w	8000f58 <_close_r>
	...

08000f34 <_write_r>:
 8000f34:	b538      	push	{r3, r4, r5, lr}
 8000f36:	4c07      	ldr	r4, [pc, #28]	; (8000f54 <_write_r+0x20>)
 8000f38:	4605      	mov	r5, r0
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	6022      	str	r2, [r4, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	f7ff fb15 	bl	8000572 <_write>
 8000f48:	1c43      	adds	r3, r0, #1
 8000f4a:	d102      	bne.n	8000f52 <_write_r+0x1e>
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	b103      	cbz	r3, 8000f52 <_write_r+0x1e>
 8000f50:	602b      	str	r3, [r5, #0]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	2000008c 	.word	0x2000008c

08000f58 <_close_r>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4c06      	ldr	r4, [pc, #24]	; (8000f74 <_close_r+0x1c>)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	4605      	mov	r5, r0
 8000f60:	4608      	mov	r0, r1
 8000f62:	6023      	str	r3, [r4, #0]
 8000f64:	f7ff fb21 	bl	80005aa <_close>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_close_r+0x1a>
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_close_r+0x1a>
 8000f70:	602b      	str	r3, [r5, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	2000008c 	.word	0x2000008c

08000f78 <_fstat_r>:
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4c07      	ldr	r4, [pc, #28]	; (8000f98 <_fstat_r+0x20>)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4605      	mov	r5, r0
 8000f80:	4608      	mov	r0, r1
 8000f82:	4611      	mov	r1, r2
 8000f84:	6023      	str	r3, [r4, #0]
 8000f86:	f7ff fb1c 	bl	80005c2 <_fstat>
 8000f8a:	1c43      	adds	r3, r0, #1
 8000f8c:	d102      	bne.n	8000f94 <_fstat_r+0x1c>
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	b103      	cbz	r3, 8000f94 <_fstat_r+0x1c>
 8000f92:	602b      	str	r3, [r5, #0]
 8000f94:	bd38      	pop	{r3, r4, r5, pc}
 8000f96:	bf00      	nop
 8000f98:	2000008c 	.word	0x2000008c

08000f9c <_isatty_r>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	4c06      	ldr	r4, [pc, #24]	; (8000fb8 <_isatty_r+0x1c>)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4605      	mov	r5, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	6023      	str	r3, [r4, #0]
 8000fa8:	f7ff fb1b 	bl	80005e2 <_isatty>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d102      	bne.n	8000fb6 <_isatty_r+0x1a>
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	b103      	cbz	r3, 8000fb6 <_isatty_r+0x1a>
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	2000008c 	.word	0x2000008c

08000fbc <_lseek_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4c07      	ldr	r4, [pc, #28]	; (8000fdc <_lseek_r+0x20>)
 8000fc0:	4605      	mov	r5, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6022      	str	r2, [r4, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f7ff fb14 	bl	80005f8 <_lseek>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d102      	bne.n	8000fda <_lseek_r+0x1e>
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	b103      	cbz	r3, 8000fda <_lseek_r+0x1e>
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	2000008c 	.word	0x2000008c

08000fe0 <__malloc_lock>:
 8000fe0:	4770      	bx	lr

08000fe2 <__malloc_unlock>:
 8000fe2:	4770      	bx	lr

08000fe4 <_read_r>:
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4c07      	ldr	r4, [pc, #28]	; (8001004 <_read_r+0x20>)
 8000fe8:	4605      	mov	r5, r0
 8000fea:	4608      	mov	r0, r1
 8000fec:	4611      	mov	r1, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	6022      	str	r2, [r4, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f7ff faa0 	bl	8000538 <_read>
 8000ff8:	1c43      	adds	r3, r0, #1
 8000ffa:	d102      	bne.n	8001002 <_read_r+0x1e>
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	b103      	cbz	r3, 8001002 <_read_r+0x1e>
 8001000:	602b      	str	r3, [r5, #0]
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	2000008c 	.word	0x2000008c

08001008 <_init>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr

08001014 <_fini>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr
