
Keypad4x4verUdemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000ec8  08000ec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f48  08000f48  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000f48  08000f48  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f48  08000f48  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f48  08000f48  00010f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f4c  08000f4c  00010f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08000fb4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08000fb4  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021eb  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005a3  00000000  00000000  0002227f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  00022828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e0  00000000  00000000  00022940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002af1  00000000  00000000  00022a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000012c4  00000000  00000000  00025511  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000916d  00000000  00000000  000267d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000092c  00000000  00000000  0002f9c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000eb0 	.word	0x08000eb0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000eb0 	.word	0x08000eb0

08000204 <main>:
*/
#include<stdint.h>
#include<stdio.h>

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b08a      	sub	sp, #40	; 0x28
 8000208:	af00      	add	r7, sp, #0
//***********Peripheral register addresses
//6.3.10 RCC AHB1 peripheral clock enable register (RCC_AHB1ENR)
	uint32_t volatile *const pClockCtrlReg=(uint32_t*) (0x40023800+0x30);	//6.3.10  (RCC_AHB1ENR)
 800020a:	4b56      	ldr	r3, [pc, #344]	; (8000364 <main+0x160>)
 800020c:	627b      	str	r3, [r7, #36]	; 0x24
//7.4.1 GPIO port mode register (GPIOx_MODER) (x = A..H)
	uint32_t volatile *const pPortAModeReg=(uint32_t*)0x40020000;
 800020e:	4b56      	ldr	r3, [pc, #344]	; (8000368 <main+0x164>)
 8000210:	623b      	str	r3, [r7, #32]
	uint32_t volatile *const pPortBModeReg=(uint32_t*)0x40020400;
 8000212:	4b56      	ldr	r3, [pc, #344]	; (800036c <main+0x168>)
 8000214:	61fb      	str	r3, [r7, #28]
//  7.4.4 GPIO port pull-up/pull-down register (GPIOx_PUPDR) (x = A..H)
	uint32_t volatile *const pPortApullUpDownlReg=(uint32_t*)(0x40020000+0x0C);
 8000216:	4b56      	ldr	r3, [pc, #344]	; (8000370 <main+0x16c>)
 8000218:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const pPortBpullUpDownlReg=(uint32_t*)(0x40020400+0x0C);
 800021a:	4b56      	ldr	r3, [pc, #344]	; (8000374 <main+0x170>)
 800021c:	617b      	str	r3, [r7, #20]
//7.4.5 GPIO port input data register (GPIOx_IDR) (x = A..H)
	uint32_t volatile *const pPortAInputReg=(uint32_t*)(0x40020000+0x10);
 800021e:	4b56      	ldr	r3, [pc, #344]	; (8000378 <main+0x174>)
 8000220:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pPortBInputReg=(uint32_t*)(0x40020400+0x10);
 8000222:	4b56      	ldr	r3, [pc, #344]	; (800037c <main+0x178>)
 8000224:	60fb      	str	r3, [r7, #12]
//7.4.6 GPIO port output data register (GPIOx_ODR) (x = A..H)
	uint32_t volatile *const pPortAOutputReg=(uint32_t*)(0x40020000+0x14);
 8000226:	4b56      	ldr	r3, [pc, #344]	; (8000380 <main+0x17c>)
 8000228:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPortBOutputReg=(uint32_t*)(0x40020400+0x14);
 800022a:	4b56      	ldr	r3, [pc, #344]	; (8000384 <main+0x180>)
 800022c:	607b      	str	r3, [r7, #4]

//************Cnable the peripheral clock of GPIO* peripheral
	*pClockCtrlReg |= (1<<0); 	//Enable Clock on PortA
 800022e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0201 	orr.w	r2, r3, #1
 8000236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000238:	601a      	str	r2, [r3, #0]
	*pClockCtrlReg |= (1<<1);	//Enable Clock on PortB
 800023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 0202 	orr.w	r2, r3, #2
 8000242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000244:	601a      	str	r2, [r3, #0]
	*pClockCtrlReg |= (1<<2);	//Enable Clock on PortC
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0204 	orr.w	r2, r3, #4
 800024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000250:	601a      	str	r2, [r3, #0]
//************Configure outputs (rows)
	//Configure PA8 IO pin as output
	*pPortAModeReg |=(1<<16);	//
 8000252:	6a3b      	ldr	r3, [r7, #32]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800025a:	6a3b      	ldr	r3, [r7, #32]
 800025c:	601a      	str	r2, [r3, #0]
	//Configure PB10 IO pin as output
	*pPortBModeReg |=(1<<20);	//set 20 position
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	601a      	str	r2, [r3, #0]
	//Configure PB4 IO pin as output
	*pPortBModeReg &=~(1<<9);	//clear 9 position
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	601a      	str	r2, [r3, #0]
	*pPortBModeReg |=(1<<8);	//set 8 position
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	601a      	str	r2, [r3, #0]
	//Configure PB5 IO pin as output
	*pPortBModeReg |=(1<<10);	//set 10 position
 8000282:	69fb      	ldr	r3, [r7, #28]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800028a:	69fb      	ldr	r3, [r7, #28]
 800028c:	601a      	str	r2, [r3, #0]

//configure output for led
	//Configure PA5 IO pin as output
		//a. clear 10 and 11 position
	*pPortAModeReg &=~(3<<10);//*pPortAModeReg &= 0xFFFFF3FF;
 800028e:	6a3b      	ldr	r3, [r7, #32]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000296:	6a3b      	ldr	r3, [r7, #32]
 8000298:	601a      	str	r2, [r3, #0]
		//b make 10 position as 1 set
	*pPortAModeReg |= (1<<10);//*pPortAModeReg |= 0x00000400;
 800029a:	6a3b      	ldr	r3, [r7, #32]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	601a      	str	r2, [r3, #0]

//************Configure inputs (columns)
	//Configure PA10 IO pin as input
	*pPortAModeReg &=~(3<<20);	//clear 20;21 position
 80002a6:	6a3b      	ldr	r3, [r7, #32]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	601a      	str	r2, [r3, #0]
	//Configure PA2 IO pin as input
	*pPortAModeReg &=~(3<<4);	//clear 4;5 position
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80002ba:	6a3b      	ldr	r3, [r7, #32]
 80002bc:	601a      	str	r2, [r3, #0]
	//Configure PA3 IO pin as input
	*pPortAModeReg &=~(3<<6);	//clear 6;7 position
 80002be:	6a3b      	ldr	r3, [r7, #32]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80002c6:	6a3b      	ldr	r3, [r7, #32]
 80002c8:	601a      	str	r2, [r3, #0]
	//Configure PB3 IO pin as input
	*pPortBModeReg &=~(3<<6);	//clear 6;7 position
 80002ca:	69fb      	ldr	r3, [r7, #28]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	601a      	str	r2, [r3, #0]
//***********Enable internal pull-up resistors for outputs
	//Configure PA10 IO pin with pull-up
	*pPortApullUpDownlReg |=(1<<20);	//set 21 position
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80002de:	69bb      	ldr	r3, [r7, #24]
 80002e0:	601a      	str	r2, [r3, #0]
	//Configure PA2 IO pin with pull-up
	*pPortApullUpDownlReg |=(1<<4);		//set 4 position
 80002e2:	69bb      	ldr	r3, [r7, #24]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f043 0210 	orr.w	r2, r3, #16
 80002ea:	69bb      	ldr	r3, [r7, #24]
 80002ec:	601a      	str	r2, [r3, #0]
	//Configure PA3 IO pin with pull-up
	*pPortApullUpDownlReg |=(1<<6);		//set 6 position
 80002ee:	69bb      	ldr	r3, [r7, #24]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002f6:	69bb      	ldr	r3, [r7, #24]
 80002f8:	601a      	str	r2, [r3, #0]
	//Configure PB3 IO pin with pull-up
	*pPortBpullUpDownlReg |=(1<<6);		//set 6 position
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	601a      	str	r2, [r3, #0]

//**********BEGIN***********

//***********Make all (outputs) rows HIGH
	//Configure PB10 IO pin as 1
		*pPortBOutputReg |=(1<<10);	//
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
	//Configure PB4 IO pin as 1
		*pPortBOutputReg |=(1<<4);	//
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f043 0210 	orr.w	r2, r3, #16
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]
	//Configure PB5 IO pin as 1
		*pPortBOutputReg |=(1<<5);	//
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0220 	orr.w	r2, r3, #32
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
	//Configure PA8 IO pin as 1
		*pPortAOutputReg |=(1<<8);	//
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	601a      	str	r2, [r3, #0]
//**********Make R1 LOW PA8
	//Configure PA8 IO pin as 0 /Row 1
		*pPortAOutputReg &=~(1<<8);	//R1
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	601a      	str	r2, [r3, #0]
//scan the columns
	//check C1 PB3 low or high
		printf("proverca\n");
 8000342:	4811      	ldr	r0, [pc, #68]	; (8000388 <main+0x184>)
 8000344:	f000 f9a8 	bl	8000698 <puts>

		if(!(*pPortBInputReg & (1<<3))){
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 0308 	and.w	r3, r3, #8
 8000350:	2b00      	cmp	r3, #0
 8000352:	d102      	bne.n	800035a <main+0x156>
			//key is pressed
			printf("pressed key 1\n");
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <main+0x188>)
 8000356:	f000 f99f 	bl	8000698 <puts>
 800035a:	2300      	movs	r3, #0

		}//endIF


}//End MAIN
 800035c:	4618      	mov	r0, r3
 800035e:	3728      	adds	r7, #40	; 0x28
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40023830 	.word	0x40023830
 8000368:	40020000 	.word	0x40020000
 800036c:	40020400 	.word	0x40020400
 8000370:	4002000c 	.word	0x4002000c
 8000374:	4002040c 	.word	0x4002040c
 8000378:	40020010 	.word	0x40020010
 800037c:	40020410 	.word	0x40020410
 8000380:	40020014 	.word	0x40020014
 8000384:	40020414 	.word	0x40020414
 8000388:	08000ec8 	.word	0x08000ec8
 800038c:	08000ed4 	.word	0x08000ed4

08000390 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <ITM_SendChar+0x48>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <ITM_SendChar+0x48>)
 80003a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003a6:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <ITM_SendChar+0x4c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <ITM_SendChar+0x4c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003b2:	bf00      	nop
 80003b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0f8      	beq.n	80003b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	6013      	str	r3, [r2, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000edfc 	.word	0xe000edfc
 80003dc:	e0000e00 	.word	0xe0000e00

080003e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	e00a      	b.n	8000408 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003f2:	f3af 8000 	nop.w
 80003f6:	4601      	mov	r1, r0
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	60ba      	str	r2, [r7, #8]
 80003fe:	b2ca      	uxtb	r2, r1
 8000400:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	3301      	adds	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	429a      	cmp	r2, r3
 800040e:	dbf0      	blt.n	80003f2 <_read+0x12>
	}

return len;
 8000410:	687b      	ldr	r3, [r7, #4]
}
 8000412:	4618      	mov	r0, r3
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b086      	sub	sp, #24
 800041e:	af00      	add	r7, sp, #0
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	60b9      	str	r1, [r7, #8]
 8000424:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e009      	b.n	8000440 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	1c5a      	adds	r2, r3, #1
 8000430:	60ba      	str	r2, [r7, #8]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff ffab 	bl	8000390 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	3301      	adds	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	697a      	ldr	r2, [r7, #20]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	429a      	cmp	r2, r3
 8000446:	dbf1      	blt.n	800042c <_write+0x12>
	}
	return len;
 8000448:	687b      	ldr	r3, [r7, #4]
}
 800044a:	4618      	mov	r0, r3
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <_close>:

int _close(int file)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
	return -1;
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800047a:	605a      	str	r2, [r3, #4]
	return 0;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <_isatty>:

int _isatty(int file)
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
	return 1;
 8000492:	2301      	movs	r3, #1
}
 8000494:	4618      	mov	r0, r3
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
	return 0;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c4:	4a14      	ldr	r2, [pc, #80]	; (8000518 <_sbrk+0x5c>)
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <_sbrk+0x60>)
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <_sbrk+0x64>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <_sbrk+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ec:	f000 f846 	bl	800057c <__errno>
 80004f0:	4602      	mov	r2, r0
 80004f2:	230c      	movs	r3, #12
 80004f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	e009      	b.n	8000510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	4a05      	ldr	r2, [pc, #20]	; (8000520 <_sbrk+0x64>)
 800050c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20020000 	.word	0x20020000
 800051c:	00000400 	.word	0x00000400
 8000520:	20000080 	.word	0x20000080
 8000524:	20000090 	.word	0x20000090

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	; (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	; (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 f817 	bl	8000588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fe53 	bl	8000204 <main>

0800055e <LoopForever>:

LoopForever:
    b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800056c:	08000f50 	.word	0x08000f50
  ldr r2, =_sbss
 8000570:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000574:	20000090 	.word	0x20000090

08000578 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC_IRQHandler>
	...

0800057c <__errno>:
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <__errno+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <__libc_init_array>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	4e0d      	ldr	r6, [pc, #52]	; (80005c0 <__libc_init_array+0x38>)
 800058c:	4c0d      	ldr	r4, [pc, #52]	; (80005c4 <__libc_init_array+0x3c>)
 800058e:	1ba4      	subs	r4, r4, r6
 8000590:	10a4      	asrs	r4, r4, #2
 8000592:	2500      	movs	r5, #0
 8000594:	42a5      	cmp	r5, r4
 8000596:	d109      	bne.n	80005ac <__libc_init_array+0x24>
 8000598:	4e0b      	ldr	r6, [pc, #44]	; (80005c8 <__libc_init_array+0x40>)
 800059a:	4c0c      	ldr	r4, [pc, #48]	; (80005cc <__libc_init_array+0x44>)
 800059c:	f000 fc88 	bl	8000eb0 <_init>
 80005a0:	1ba4      	subs	r4, r4, r6
 80005a2:	10a4      	asrs	r4, r4, #2
 80005a4:	2500      	movs	r5, #0
 80005a6:	42a5      	cmp	r5, r4
 80005a8:	d105      	bne.n	80005b6 <__libc_init_array+0x2e>
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005b0:	4798      	blx	r3
 80005b2:	3501      	adds	r5, #1
 80005b4:	e7ee      	b.n	8000594 <__libc_init_array+0xc>
 80005b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005ba:	4798      	blx	r3
 80005bc:	3501      	adds	r5, #1
 80005be:	e7f2      	b.n	80005a6 <__libc_init_array+0x1e>
 80005c0:	08000f48 	.word	0x08000f48
 80005c4:	08000f48 	.word	0x08000f48
 80005c8:	08000f48 	.word	0x08000f48
 80005cc:	08000f4c 	.word	0x08000f4c

080005d0 <memset>:
 80005d0:	4402      	add	r2, r0
 80005d2:	4603      	mov	r3, r0
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d100      	bne.n	80005da <memset+0xa>
 80005d8:	4770      	bx	lr
 80005da:	f803 1b01 	strb.w	r1, [r3], #1
 80005de:	e7f9      	b.n	80005d4 <memset+0x4>

080005e0 <_puts_r>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	460e      	mov	r6, r1
 80005e4:	4605      	mov	r5, r0
 80005e6:	b118      	cbz	r0, 80005f0 <_puts_r+0x10>
 80005e8:	6983      	ldr	r3, [r0, #24]
 80005ea:	b90b      	cbnz	r3, 80005f0 <_puts_r+0x10>
 80005ec:	f000 fa0c 	bl	8000a08 <__sinit>
 80005f0:	69ab      	ldr	r3, [r5, #24]
 80005f2:	68ac      	ldr	r4, [r5, #8]
 80005f4:	b913      	cbnz	r3, 80005fc <_puts_r+0x1c>
 80005f6:	4628      	mov	r0, r5
 80005f8:	f000 fa06 	bl	8000a08 <__sinit>
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <_puts_r+0xac>)
 80005fe:	429c      	cmp	r4, r3
 8000600:	d117      	bne.n	8000632 <_puts_r+0x52>
 8000602:	686c      	ldr	r4, [r5, #4]
 8000604:	89a3      	ldrh	r3, [r4, #12]
 8000606:	071b      	lsls	r3, r3, #28
 8000608:	d51d      	bpl.n	8000646 <_puts_r+0x66>
 800060a:	6923      	ldr	r3, [r4, #16]
 800060c:	b1db      	cbz	r3, 8000646 <_puts_r+0x66>
 800060e:	3e01      	subs	r6, #1
 8000610:	68a3      	ldr	r3, [r4, #8]
 8000612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000616:	3b01      	subs	r3, #1
 8000618:	60a3      	str	r3, [r4, #8]
 800061a:	b9e9      	cbnz	r1, 8000658 <_puts_r+0x78>
 800061c:	2b00      	cmp	r3, #0
 800061e:	da2e      	bge.n	800067e <_puts_r+0x9e>
 8000620:	4622      	mov	r2, r4
 8000622:	210a      	movs	r1, #10
 8000624:	4628      	mov	r0, r5
 8000626:	f000 f83f 	bl	80006a8 <__swbuf_r>
 800062a:	3001      	adds	r0, #1
 800062c:	d011      	beq.n	8000652 <_puts_r+0x72>
 800062e:	200a      	movs	r0, #10
 8000630:	e011      	b.n	8000656 <_puts_r+0x76>
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <_puts_r+0xb0>)
 8000634:	429c      	cmp	r4, r3
 8000636:	d101      	bne.n	800063c <_puts_r+0x5c>
 8000638:	68ac      	ldr	r4, [r5, #8]
 800063a:	e7e3      	b.n	8000604 <_puts_r+0x24>
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <_puts_r+0xb4>)
 800063e:	429c      	cmp	r4, r3
 8000640:	bf08      	it	eq
 8000642:	68ec      	ldreq	r4, [r5, #12]
 8000644:	e7de      	b.n	8000604 <_puts_r+0x24>
 8000646:	4621      	mov	r1, r4
 8000648:	4628      	mov	r0, r5
 800064a:	f000 f87f 	bl	800074c <__swsetup_r>
 800064e:	2800      	cmp	r0, #0
 8000650:	d0dd      	beq.n	800060e <_puts_r+0x2e>
 8000652:	f04f 30ff 	mov.w	r0, #4294967295
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	2b00      	cmp	r3, #0
 800065a:	da04      	bge.n	8000666 <_puts_r+0x86>
 800065c:	69a2      	ldr	r2, [r4, #24]
 800065e:	429a      	cmp	r2, r3
 8000660:	dc06      	bgt.n	8000670 <_puts_r+0x90>
 8000662:	290a      	cmp	r1, #10
 8000664:	d004      	beq.n	8000670 <_puts_r+0x90>
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	6022      	str	r2, [r4, #0]
 800066c:	7019      	strb	r1, [r3, #0]
 800066e:	e7cf      	b.n	8000610 <_puts_r+0x30>
 8000670:	4622      	mov	r2, r4
 8000672:	4628      	mov	r0, r5
 8000674:	f000 f818 	bl	80006a8 <__swbuf_r>
 8000678:	3001      	adds	r0, #1
 800067a:	d1c9      	bne.n	8000610 <_puts_r+0x30>
 800067c:	e7e9      	b.n	8000652 <_puts_r+0x72>
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	200a      	movs	r0, #10
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	6022      	str	r2, [r4, #0]
 8000686:	7018      	strb	r0, [r3, #0]
 8000688:	e7e5      	b.n	8000656 <_puts_r+0x76>
 800068a:	bf00      	nop
 800068c:	08000f08 	.word	0x08000f08
 8000690:	08000f28 	.word	0x08000f28
 8000694:	08000ee8 	.word	0x08000ee8

08000698 <puts>:
 8000698:	4b02      	ldr	r3, [pc, #8]	; (80006a4 <puts+0xc>)
 800069a:	4601      	mov	r1, r0
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	f7ff bf9f 	b.w	80005e0 <_puts_r>
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000

080006a8 <__swbuf_r>:
 80006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006aa:	460e      	mov	r6, r1
 80006ac:	4614      	mov	r4, r2
 80006ae:	4605      	mov	r5, r0
 80006b0:	b118      	cbz	r0, 80006ba <__swbuf_r+0x12>
 80006b2:	6983      	ldr	r3, [r0, #24]
 80006b4:	b90b      	cbnz	r3, 80006ba <__swbuf_r+0x12>
 80006b6:	f000 f9a7 	bl	8000a08 <__sinit>
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <__swbuf_r+0x98>)
 80006bc:	429c      	cmp	r4, r3
 80006be:	d12a      	bne.n	8000716 <__swbuf_r+0x6e>
 80006c0:	686c      	ldr	r4, [r5, #4]
 80006c2:	69a3      	ldr	r3, [r4, #24]
 80006c4:	60a3      	str	r3, [r4, #8]
 80006c6:	89a3      	ldrh	r3, [r4, #12]
 80006c8:	071a      	lsls	r2, r3, #28
 80006ca:	d52e      	bpl.n	800072a <__swbuf_r+0x82>
 80006cc:	6923      	ldr	r3, [r4, #16]
 80006ce:	b363      	cbz	r3, 800072a <__swbuf_r+0x82>
 80006d0:	6923      	ldr	r3, [r4, #16]
 80006d2:	6820      	ldr	r0, [r4, #0]
 80006d4:	1ac0      	subs	r0, r0, r3
 80006d6:	6963      	ldr	r3, [r4, #20]
 80006d8:	b2f6      	uxtb	r6, r6
 80006da:	4283      	cmp	r3, r0
 80006dc:	4637      	mov	r7, r6
 80006de:	dc04      	bgt.n	80006ea <__swbuf_r+0x42>
 80006e0:	4621      	mov	r1, r4
 80006e2:	4628      	mov	r0, r5
 80006e4:	f000 f926 	bl	8000934 <_fflush_r>
 80006e8:	bb28      	cbnz	r0, 8000736 <__swbuf_r+0x8e>
 80006ea:	68a3      	ldr	r3, [r4, #8]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	60a3      	str	r3, [r4, #8]
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	6022      	str	r2, [r4, #0]
 80006f6:	701e      	strb	r6, [r3, #0]
 80006f8:	6963      	ldr	r3, [r4, #20]
 80006fa:	3001      	adds	r0, #1
 80006fc:	4283      	cmp	r3, r0
 80006fe:	d004      	beq.n	800070a <__swbuf_r+0x62>
 8000700:	89a3      	ldrh	r3, [r4, #12]
 8000702:	07db      	lsls	r3, r3, #31
 8000704:	d519      	bpl.n	800073a <__swbuf_r+0x92>
 8000706:	2e0a      	cmp	r6, #10
 8000708:	d117      	bne.n	800073a <__swbuf_r+0x92>
 800070a:	4621      	mov	r1, r4
 800070c:	4628      	mov	r0, r5
 800070e:	f000 f911 	bl	8000934 <_fflush_r>
 8000712:	b190      	cbz	r0, 800073a <__swbuf_r+0x92>
 8000714:	e00f      	b.n	8000736 <__swbuf_r+0x8e>
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <__swbuf_r+0x9c>)
 8000718:	429c      	cmp	r4, r3
 800071a:	d101      	bne.n	8000720 <__swbuf_r+0x78>
 800071c:	68ac      	ldr	r4, [r5, #8]
 800071e:	e7d0      	b.n	80006c2 <__swbuf_r+0x1a>
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <__swbuf_r+0xa0>)
 8000722:	429c      	cmp	r4, r3
 8000724:	bf08      	it	eq
 8000726:	68ec      	ldreq	r4, [r5, #12]
 8000728:	e7cb      	b.n	80006c2 <__swbuf_r+0x1a>
 800072a:	4621      	mov	r1, r4
 800072c:	4628      	mov	r0, r5
 800072e:	f000 f80d 	bl	800074c <__swsetup_r>
 8000732:	2800      	cmp	r0, #0
 8000734:	d0cc      	beq.n	80006d0 <__swbuf_r+0x28>
 8000736:	f04f 37ff 	mov.w	r7, #4294967295
 800073a:	4638      	mov	r0, r7
 800073c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800073e:	bf00      	nop
 8000740:	08000f08 	.word	0x08000f08
 8000744:	08000f28 	.word	0x08000f28
 8000748:	08000ee8 	.word	0x08000ee8

0800074c <__swsetup_r>:
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <__swsetup_r+0xcc>)
 800074e:	b570      	push	{r4, r5, r6, lr}
 8000750:	681d      	ldr	r5, [r3, #0]
 8000752:	4606      	mov	r6, r0
 8000754:	460c      	mov	r4, r1
 8000756:	b125      	cbz	r5, 8000762 <__swsetup_r+0x16>
 8000758:	69ab      	ldr	r3, [r5, #24]
 800075a:	b913      	cbnz	r3, 8000762 <__swsetup_r+0x16>
 800075c:	4628      	mov	r0, r5
 800075e:	f000 f953 	bl	8000a08 <__sinit>
 8000762:	4b2e      	ldr	r3, [pc, #184]	; (800081c <__swsetup_r+0xd0>)
 8000764:	429c      	cmp	r4, r3
 8000766:	d10f      	bne.n	8000788 <__swsetup_r+0x3c>
 8000768:	686c      	ldr	r4, [r5, #4]
 800076a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800076e:	b29a      	uxth	r2, r3
 8000770:	0715      	lsls	r5, r2, #28
 8000772:	d42c      	bmi.n	80007ce <__swsetup_r+0x82>
 8000774:	06d0      	lsls	r0, r2, #27
 8000776:	d411      	bmi.n	800079c <__swsetup_r+0x50>
 8000778:	2209      	movs	r2, #9
 800077a:	6032      	str	r2, [r6, #0]
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	81a3      	strh	r3, [r4, #12]
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	e03e      	b.n	8000806 <__swsetup_r+0xba>
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <__swsetup_r+0xd4>)
 800078a:	429c      	cmp	r4, r3
 800078c:	d101      	bne.n	8000792 <__swsetup_r+0x46>
 800078e:	68ac      	ldr	r4, [r5, #8]
 8000790:	e7eb      	b.n	800076a <__swsetup_r+0x1e>
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <__swsetup_r+0xd8>)
 8000794:	429c      	cmp	r4, r3
 8000796:	bf08      	it	eq
 8000798:	68ec      	ldreq	r4, [r5, #12]
 800079a:	e7e6      	b.n	800076a <__swsetup_r+0x1e>
 800079c:	0751      	lsls	r1, r2, #29
 800079e:	d512      	bpl.n	80007c6 <__swsetup_r+0x7a>
 80007a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007a2:	b141      	cbz	r1, 80007b6 <__swsetup_r+0x6a>
 80007a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007a8:	4299      	cmp	r1, r3
 80007aa:	d002      	beq.n	80007b2 <__swsetup_r+0x66>
 80007ac:	4630      	mov	r0, r6
 80007ae:	f000 fa19 	bl	8000be4 <_free_r>
 80007b2:	2300      	movs	r3, #0
 80007b4:	6363      	str	r3, [r4, #52]	; 0x34
 80007b6:	89a3      	ldrh	r3, [r4, #12]
 80007b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80007bc:	81a3      	strh	r3, [r4, #12]
 80007be:	2300      	movs	r3, #0
 80007c0:	6063      	str	r3, [r4, #4]
 80007c2:	6923      	ldr	r3, [r4, #16]
 80007c4:	6023      	str	r3, [r4, #0]
 80007c6:	89a3      	ldrh	r3, [r4, #12]
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	81a3      	strh	r3, [r4, #12]
 80007ce:	6923      	ldr	r3, [r4, #16]
 80007d0:	b94b      	cbnz	r3, 80007e6 <__swsetup_r+0x9a>
 80007d2:	89a3      	ldrh	r3, [r4, #12]
 80007d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80007d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007dc:	d003      	beq.n	80007e6 <__swsetup_r+0x9a>
 80007de:	4621      	mov	r1, r4
 80007e0:	4630      	mov	r0, r6
 80007e2:	f000 f9bf 	bl	8000b64 <__smakebuf_r>
 80007e6:	89a2      	ldrh	r2, [r4, #12]
 80007e8:	f012 0301 	ands.w	r3, r2, #1
 80007ec:	d00c      	beq.n	8000808 <__swsetup_r+0xbc>
 80007ee:	2300      	movs	r3, #0
 80007f0:	60a3      	str	r3, [r4, #8]
 80007f2:	6963      	ldr	r3, [r4, #20]
 80007f4:	425b      	negs	r3, r3
 80007f6:	61a3      	str	r3, [r4, #24]
 80007f8:	6923      	ldr	r3, [r4, #16]
 80007fa:	b953      	cbnz	r3, 8000812 <__swsetup_r+0xc6>
 80007fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000800:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000804:	d1ba      	bne.n	800077c <__swsetup_r+0x30>
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	0792      	lsls	r2, r2, #30
 800080a:	bf58      	it	pl
 800080c:	6963      	ldrpl	r3, [r4, #20]
 800080e:	60a3      	str	r3, [r4, #8]
 8000810:	e7f2      	b.n	80007f8 <__swsetup_r+0xac>
 8000812:	2000      	movs	r0, #0
 8000814:	e7f7      	b.n	8000806 <__swsetup_r+0xba>
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	08000f08 	.word	0x08000f08
 8000820:	08000f28 	.word	0x08000f28
 8000824:	08000ee8 	.word	0x08000ee8

08000828 <__sflush_r>:
 8000828:	898a      	ldrh	r2, [r1, #12]
 800082a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800082e:	4605      	mov	r5, r0
 8000830:	0710      	lsls	r0, r2, #28
 8000832:	460c      	mov	r4, r1
 8000834:	d458      	bmi.n	80008e8 <__sflush_r+0xc0>
 8000836:	684b      	ldr	r3, [r1, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dc05      	bgt.n	8000848 <__sflush_r+0x20>
 800083c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800083e:	2b00      	cmp	r3, #0
 8000840:	dc02      	bgt.n	8000848 <__sflush_r+0x20>
 8000842:	2000      	movs	r0, #0
 8000844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800084a:	2e00      	cmp	r6, #0
 800084c:	d0f9      	beq.n	8000842 <__sflush_r+0x1a>
 800084e:	2300      	movs	r3, #0
 8000850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000854:	682f      	ldr	r7, [r5, #0]
 8000856:	6a21      	ldr	r1, [r4, #32]
 8000858:	602b      	str	r3, [r5, #0]
 800085a:	d032      	beq.n	80008c2 <__sflush_r+0x9a>
 800085c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800085e:	89a3      	ldrh	r3, [r4, #12]
 8000860:	075a      	lsls	r2, r3, #29
 8000862:	d505      	bpl.n	8000870 <__sflush_r+0x48>
 8000864:	6863      	ldr	r3, [r4, #4]
 8000866:	1ac0      	subs	r0, r0, r3
 8000868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800086a:	b10b      	cbz	r3, 8000870 <__sflush_r+0x48>
 800086c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800086e:	1ac0      	subs	r0, r0, r3
 8000870:	2300      	movs	r3, #0
 8000872:	4602      	mov	r2, r0
 8000874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000876:	6a21      	ldr	r1, [r4, #32]
 8000878:	4628      	mov	r0, r5
 800087a:	47b0      	blx	r6
 800087c:	1c43      	adds	r3, r0, #1
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	d106      	bne.n	8000890 <__sflush_r+0x68>
 8000882:	6829      	ldr	r1, [r5, #0]
 8000884:	291d      	cmp	r1, #29
 8000886:	d848      	bhi.n	800091a <__sflush_r+0xf2>
 8000888:	4a29      	ldr	r2, [pc, #164]	; (8000930 <__sflush_r+0x108>)
 800088a:	40ca      	lsrs	r2, r1
 800088c:	07d6      	lsls	r6, r2, #31
 800088e:	d544      	bpl.n	800091a <__sflush_r+0xf2>
 8000890:	2200      	movs	r2, #0
 8000892:	6062      	str	r2, [r4, #4]
 8000894:	04d9      	lsls	r1, r3, #19
 8000896:	6922      	ldr	r2, [r4, #16]
 8000898:	6022      	str	r2, [r4, #0]
 800089a:	d504      	bpl.n	80008a6 <__sflush_r+0x7e>
 800089c:	1c42      	adds	r2, r0, #1
 800089e:	d101      	bne.n	80008a4 <__sflush_r+0x7c>
 80008a0:	682b      	ldr	r3, [r5, #0]
 80008a2:	b903      	cbnz	r3, 80008a6 <__sflush_r+0x7e>
 80008a4:	6560      	str	r0, [r4, #84]	; 0x54
 80008a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008a8:	602f      	str	r7, [r5, #0]
 80008aa:	2900      	cmp	r1, #0
 80008ac:	d0c9      	beq.n	8000842 <__sflush_r+0x1a>
 80008ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d002      	beq.n	80008bc <__sflush_r+0x94>
 80008b6:	4628      	mov	r0, r5
 80008b8:	f000 f994 	bl	8000be4 <_free_r>
 80008bc:	2000      	movs	r0, #0
 80008be:	6360      	str	r0, [r4, #52]	; 0x34
 80008c0:	e7c0      	b.n	8000844 <__sflush_r+0x1c>
 80008c2:	2301      	movs	r3, #1
 80008c4:	4628      	mov	r0, r5
 80008c6:	47b0      	blx	r6
 80008c8:	1c41      	adds	r1, r0, #1
 80008ca:	d1c8      	bne.n	800085e <__sflush_r+0x36>
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0c5      	beq.n	800085e <__sflush_r+0x36>
 80008d2:	2b1d      	cmp	r3, #29
 80008d4:	d001      	beq.n	80008da <__sflush_r+0xb2>
 80008d6:	2b16      	cmp	r3, #22
 80008d8:	d101      	bne.n	80008de <__sflush_r+0xb6>
 80008da:	602f      	str	r7, [r5, #0]
 80008dc:	e7b1      	b.n	8000842 <__sflush_r+0x1a>
 80008de:	89a3      	ldrh	r3, [r4, #12]
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	81a3      	strh	r3, [r4, #12]
 80008e6:	e7ad      	b.n	8000844 <__sflush_r+0x1c>
 80008e8:	690f      	ldr	r7, [r1, #16]
 80008ea:	2f00      	cmp	r7, #0
 80008ec:	d0a9      	beq.n	8000842 <__sflush_r+0x1a>
 80008ee:	0793      	lsls	r3, r2, #30
 80008f0:	680e      	ldr	r6, [r1, #0]
 80008f2:	bf08      	it	eq
 80008f4:	694b      	ldreq	r3, [r1, #20]
 80008f6:	600f      	str	r7, [r1, #0]
 80008f8:	bf18      	it	ne
 80008fa:	2300      	movne	r3, #0
 80008fc:	eba6 0807 	sub.w	r8, r6, r7
 8000900:	608b      	str	r3, [r1, #8]
 8000902:	f1b8 0f00 	cmp.w	r8, #0
 8000906:	dd9c      	ble.n	8000842 <__sflush_r+0x1a>
 8000908:	4643      	mov	r3, r8
 800090a:	463a      	mov	r2, r7
 800090c:	6a21      	ldr	r1, [r4, #32]
 800090e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000910:	4628      	mov	r0, r5
 8000912:	47b0      	blx	r6
 8000914:	2800      	cmp	r0, #0
 8000916:	dc06      	bgt.n	8000926 <__sflush_r+0xfe>
 8000918:	89a3      	ldrh	r3, [r4, #12]
 800091a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091e:	81a3      	strh	r3, [r4, #12]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	e78e      	b.n	8000844 <__sflush_r+0x1c>
 8000926:	4407      	add	r7, r0
 8000928:	eba8 0800 	sub.w	r8, r8, r0
 800092c:	e7e9      	b.n	8000902 <__sflush_r+0xda>
 800092e:	bf00      	nop
 8000930:	20400001 	.word	0x20400001

08000934 <_fflush_r>:
 8000934:	b538      	push	{r3, r4, r5, lr}
 8000936:	690b      	ldr	r3, [r1, #16]
 8000938:	4605      	mov	r5, r0
 800093a:	460c      	mov	r4, r1
 800093c:	b1db      	cbz	r3, 8000976 <_fflush_r+0x42>
 800093e:	b118      	cbz	r0, 8000948 <_fflush_r+0x14>
 8000940:	6983      	ldr	r3, [r0, #24]
 8000942:	b90b      	cbnz	r3, 8000948 <_fflush_r+0x14>
 8000944:	f000 f860 	bl	8000a08 <__sinit>
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <_fflush_r+0x48>)
 800094a:	429c      	cmp	r4, r3
 800094c:	d109      	bne.n	8000962 <_fflush_r+0x2e>
 800094e:	686c      	ldr	r4, [r5, #4]
 8000950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000954:	b17b      	cbz	r3, 8000976 <_fflush_r+0x42>
 8000956:	4621      	mov	r1, r4
 8000958:	4628      	mov	r0, r5
 800095a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800095e:	f7ff bf63 	b.w	8000828 <__sflush_r>
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <_fflush_r+0x4c>)
 8000964:	429c      	cmp	r4, r3
 8000966:	d101      	bne.n	800096c <_fflush_r+0x38>
 8000968:	68ac      	ldr	r4, [r5, #8]
 800096a:	e7f1      	b.n	8000950 <_fflush_r+0x1c>
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <_fflush_r+0x50>)
 800096e:	429c      	cmp	r4, r3
 8000970:	bf08      	it	eq
 8000972:	68ec      	ldreq	r4, [r5, #12]
 8000974:	e7ec      	b.n	8000950 <_fflush_r+0x1c>
 8000976:	2000      	movs	r0, #0
 8000978:	bd38      	pop	{r3, r4, r5, pc}
 800097a:	bf00      	nop
 800097c:	08000f08 	.word	0x08000f08
 8000980:	08000f28 	.word	0x08000f28
 8000984:	08000ee8 	.word	0x08000ee8

08000988 <std>:
 8000988:	2300      	movs	r3, #0
 800098a:	b510      	push	{r4, lr}
 800098c:	4604      	mov	r4, r0
 800098e:	e9c0 3300 	strd	r3, r3, [r0]
 8000992:	6083      	str	r3, [r0, #8]
 8000994:	8181      	strh	r1, [r0, #12]
 8000996:	6643      	str	r3, [r0, #100]	; 0x64
 8000998:	81c2      	strh	r2, [r0, #14]
 800099a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800099e:	6183      	str	r3, [r0, #24]
 80009a0:	4619      	mov	r1, r3
 80009a2:	2208      	movs	r2, #8
 80009a4:	305c      	adds	r0, #92	; 0x5c
 80009a6:	f7ff fe13 	bl	80005d0 <memset>
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <std+0x38>)
 80009ac:	6263      	str	r3, [r4, #36]	; 0x24
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <std+0x3c>)
 80009b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <std+0x40>)
 80009b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <std+0x44>)
 80009b8:	6224      	str	r4, [r4, #32]
 80009ba:	6323      	str	r3, [r4, #48]	; 0x30
 80009bc:	bd10      	pop	{r4, pc}
 80009be:	bf00      	nop
 80009c0:	08000d55 	.word	0x08000d55
 80009c4:	08000d77 	.word	0x08000d77
 80009c8:	08000daf 	.word	0x08000daf
 80009cc:	08000dd3 	.word	0x08000dd3

080009d0 <_cleanup_r>:
 80009d0:	4901      	ldr	r1, [pc, #4]	; (80009d8 <_cleanup_r+0x8>)
 80009d2:	f000 b885 	b.w	8000ae0 <_fwalk_reent>
 80009d6:	bf00      	nop
 80009d8:	08000935 	.word	0x08000935

080009dc <__sfmoreglue>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	1e4a      	subs	r2, r1, #1
 80009e0:	2568      	movs	r5, #104	; 0x68
 80009e2:	4355      	muls	r5, r2
 80009e4:	460e      	mov	r6, r1
 80009e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009ea:	f000 f949 	bl	8000c80 <_malloc_r>
 80009ee:	4604      	mov	r4, r0
 80009f0:	b140      	cbz	r0, 8000a04 <__sfmoreglue+0x28>
 80009f2:	2100      	movs	r1, #0
 80009f4:	e9c0 1600 	strd	r1, r6, [r0]
 80009f8:	300c      	adds	r0, #12
 80009fa:	60a0      	str	r0, [r4, #8]
 80009fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a00:	f7ff fde6 	bl	80005d0 <memset>
 8000a04:	4620      	mov	r0, r4
 8000a06:	bd70      	pop	{r4, r5, r6, pc}

08000a08 <__sinit>:
 8000a08:	6983      	ldr	r3, [r0, #24]
 8000a0a:	b510      	push	{r4, lr}
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	bb33      	cbnz	r3, 8000a5e <__sinit+0x56>
 8000a10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000a14:	6503      	str	r3, [r0, #80]	; 0x50
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <__sinit+0x58>)
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <__sinit+0x5c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6282      	str	r2, [r0, #40]	; 0x28
 8000a1e:	4298      	cmp	r0, r3
 8000a20:	bf04      	itt	eq
 8000a22:	2301      	moveq	r3, #1
 8000a24:	6183      	streq	r3, [r0, #24]
 8000a26:	f000 f81f 	bl	8000a68 <__sfp>
 8000a2a:	6060      	str	r0, [r4, #4]
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f000 f81b 	bl	8000a68 <__sfp>
 8000a32:	60a0      	str	r0, [r4, #8]
 8000a34:	4620      	mov	r0, r4
 8000a36:	f000 f817 	bl	8000a68 <__sfp>
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60e0      	str	r0, [r4, #12]
 8000a3e:	2104      	movs	r1, #4
 8000a40:	6860      	ldr	r0, [r4, #4]
 8000a42:	f7ff ffa1 	bl	8000988 <std>
 8000a46:	2201      	movs	r2, #1
 8000a48:	2109      	movs	r1, #9
 8000a4a:	68a0      	ldr	r0, [r4, #8]
 8000a4c:	f7ff ff9c 	bl	8000988 <std>
 8000a50:	2202      	movs	r2, #2
 8000a52:	2112      	movs	r1, #18
 8000a54:	68e0      	ldr	r0, [r4, #12]
 8000a56:	f7ff ff97 	bl	8000988 <std>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61a3      	str	r3, [r4, #24]
 8000a5e:	bd10      	pop	{r4, pc}
 8000a60:	08000ee4 	.word	0x08000ee4
 8000a64:	080009d1 	.word	0x080009d1

08000a68 <__sfp>:
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <__sfp+0x70>)
 8000a6c:	681e      	ldr	r6, [r3, #0]
 8000a6e:	69b3      	ldr	r3, [r6, #24]
 8000a70:	4607      	mov	r7, r0
 8000a72:	b913      	cbnz	r3, 8000a7a <__sfp+0x12>
 8000a74:	4630      	mov	r0, r6
 8000a76:	f7ff ffc7 	bl	8000a08 <__sinit>
 8000a7a:	3648      	adds	r6, #72	; 0x48
 8000a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	d503      	bpl.n	8000a8c <__sfp+0x24>
 8000a84:	6833      	ldr	r3, [r6, #0]
 8000a86:	b133      	cbz	r3, 8000a96 <__sfp+0x2e>
 8000a88:	6836      	ldr	r6, [r6, #0]
 8000a8a:	e7f7      	b.n	8000a7c <__sfp+0x14>
 8000a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a90:	b16d      	cbz	r5, 8000aae <__sfp+0x46>
 8000a92:	3468      	adds	r4, #104	; 0x68
 8000a94:	e7f4      	b.n	8000a80 <__sfp+0x18>
 8000a96:	2104      	movs	r1, #4
 8000a98:	4638      	mov	r0, r7
 8000a9a:	f7ff ff9f 	bl	80009dc <__sfmoreglue>
 8000a9e:	6030      	str	r0, [r6, #0]
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d1f1      	bne.n	8000a88 <__sfp+0x20>
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	4620      	mov	r0, r4
 8000aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <__sfp+0x74>)
 8000ab0:	6665      	str	r5, [r4, #100]	; 0x64
 8000ab2:	e9c4 5500 	strd	r5, r5, [r4]
 8000ab6:	60a5      	str	r5, [r4, #8]
 8000ab8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000abc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	4629      	mov	r1, r5
 8000ac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ac8:	f7ff fd82 	bl	80005d0 <memset>
 8000acc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ad4:	e7e9      	b.n	8000aaa <__sfp+0x42>
 8000ad6:	bf00      	nop
 8000ad8:	08000ee4 	.word	0x08000ee4
 8000adc:	ffff0001 	.word	0xffff0001

08000ae0 <_fwalk_reent>:
 8000ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ae4:	4680      	mov	r8, r0
 8000ae6:	4689      	mov	r9, r1
 8000ae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000aec:	2600      	movs	r6, #0
 8000aee:	b914      	cbnz	r4, 8000af6 <_fwalk_reent+0x16>
 8000af0:	4630      	mov	r0, r6
 8000af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000af6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000afa:	3f01      	subs	r7, #1
 8000afc:	d501      	bpl.n	8000b02 <_fwalk_reent+0x22>
 8000afe:	6824      	ldr	r4, [r4, #0]
 8000b00:	e7f5      	b.n	8000aee <_fwalk_reent+0xe>
 8000b02:	89ab      	ldrh	r3, [r5, #12]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d907      	bls.n	8000b18 <_fwalk_reent+0x38>
 8000b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	d003      	beq.n	8000b18 <_fwalk_reent+0x38>
 8000b10:	4629      	mov	r1, r5
 8000b12:	4640      	mov	r0, r8
 8000b14:	47c8      	blx	r9
 8000b16:	4306      	orrs	r6, r0
 8000b18:	3568      	adds	r5, #104	; 0x68
 8000b1a:	e7ee      	b.n	8000afa <_fwalk_reent+0x1a>

08000b1c <__swhatbuf_r>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	460e      	mov	r6, r1
 8000b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b24:	2900      	cmp	r1, #0
 8000b26:	b096      	sub	sp, #88	; 0x58
 8000b28:	4614      	mov	r4, r2
 8000b2a:	461d      	mov	r5, r3
 8000b2c:	da07      	bge.n	8000b3e <__swhatbuf_r+0x22>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	602b      	str	r3, [r5, #0]
 8000b32:	89b3      	ldrh	r3, [r6, #12]
 8000b34:	061a      	lsls	r2, r3, #24
 8000b36:	d410      	bmi.n	8000b5a <__swhatbuf_r+0x3e>
 8000b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3c:	e00e      	b.n	8000b5c <__swhatbuf_r+0x40>
 8000b3e:	466a      	mov	r2, sp
 8000b40:	f000 f96e 	bl	8000e20 <_fstat_r>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	dbf2      	blt.n	8000b2e <__swhatbuf_r+0x12>
 8000b48:	9a01      	ldr	r2, [sp, #4]
 8000b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b52:	425a      	negs	r2, r3
 8000b54:	415a      	adcs	r2, r3
 8000b56:	602a      	str	r2, [r5, #0]
 8000b58:	e7ee      	b.n	8000b38 <__swhatbuf_r+0x1c>
 8000b5a:	2340      	movs	r3, #64	; 0x40
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	6023      	str	r3, [r4, #0]
 8000b60:	b016      	add	sp, #88	; 0x58
 8000b62:	bd70      	pop	{r4, r5, r6, pc}

08000b64 <__smakebuf_r>:
 8000b64:	898b      	ldrh	r3, [r1, #12]
 8000b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b68:	079d      	lsls	r5, r3, #30
 8000b6a:	4606      	mov	r6, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	d507      	bpl.n	8000b80 <__smakebuf_r+0x1c>
 8000b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b74:	6023      	str	r3, [r4, #0]
 8000b76:	6123      	str	r3, [r4, #16]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	6163      	str	r3, [r4, #20]
 8000b7c:	b002      	add	sp, #8
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
 8000b80:	ab01      	add	r3, sp, #4
 8000b82:	466a      	mov	r2, sp
 8000b84:	f7ff ffca 	bl	8000b1c <__swhatbuf_r>
 8000b88:	9900      	ldr	r1, [sp, #0]
 8000b8a:	4605      	mov	r5, r0
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f000 f877 	bl	8000c80 <_malloc_r>
 8000b92:	b948      	cbnz	r0, 8000ba8 <__smakebuf_r+0x44>
 8000b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b98:	059a      	lsls	r2, r3, #22
 8000b9a:	d4ef      	bmi.n	8000b7c <__smakebuf_r+0x18>
 8000b9c:	f023 0303 	bic.w	r3, r3, #3
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	81a3      	strh	r3, [r4, #12]
 8000ba6:	e7e3      	b.n	8000b70 <__smakebuf_r+0xc>
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <__smakebuf_r+0x7c>)
 8000baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8000bac:	89a3      	ldrh	r3, [r4, #12]
 8000bae:	6020      	str	r0, [r4, #0]
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	81a3      	strh	r3, [r4, #12]
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	6163      	str	r3, [r4, #20]
 8000bba:	9b01      	ldr	r3, [sp, #4]
 8000bbc:	6120      	str	r0, [r4, #16]
 8000bbe:	b15b      	cbz	r3, 8000bd8 <__smakebuf_r+0x74>
 8000bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	f000 f93d 	bl	8000e44 <_isatty_r>
 8000bca:	b128      	cbz	r0, 8000bd8 <__smakebuf_r+0x74>
 8000bcc:	89a3      	ldrh	r3, [r4, #12]
 8000bce:	f023 0303 	bic.w	r3, r3, #3
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	81a3      	strh	r3, [r4, #12]
 8000bd8:	89a3      	ldrh	r3, [r4, #12]
 8000bda:	431d      	orrs	r5, r3
 8000bdc:	81a5      	strh	r5, [r4, #12]
 8000bde:	e7cd      	b.n	8000b7c <__smakebuf_r+0x18>
 8000be0:	080009d1 	.word	0x080009d1

08000be4 <_free_r>:
 8000be4:	b538      	push	{r3, r4, r5, lr}
 8000be6:	4605      	mov	r5, r0
 8000be8:	2900      	cmp	r1, #0
 8000bea:	d045      	beq.n	8000c78 <_free_r+0x94>
 8000bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bf0:	1f0c      	subs	r4, r1, #4
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bfb8      	it	lt
 8000bf6:	18e4      	addlt	r4, r4, r3
 8000bf8:	f000 f946 	bl	8000e88 <__malloc_lock>
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <_free_r+0x98>)
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	4610      	mov	r0, r2
 8000c02:	b933      	cbnz	r3, 8000c12 <_free_r+0x2e>
 8000c04:	6063      	str	r3, [r4, #4]
 8000c06:	6014      	str	r4, [r2, #0]
 8000c08:	4628      	mov	r0, r5
 8000c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c0e:	f000 b93c 	b.w	8000e8a <__malloc_unlock>
 8000c12:	42a3      	cmp	r3, r4
 8000c14:	d90c      	bls.n	8000c30 <_free_r+0x4c>
 8000c16:	6821      	ldr	r1, [r4, #0]
 8000c18:	1862      	adds	r2, r4, r1
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	bf04      	itt	eq
 8000c1e:	681a      	ldreq	r2, [r3, #0]
 8000c20:	685b      	ldreq	r3, [r3, #4]
 8000c22:	6063      	str	r3, [r4, #4]
 8000c24:	bf04      	itt	eq
 8000c26:	1852      	addeq	r2, r2, r1
 8000c28:	6022      	streq	r2, [r4, #0]
 8000c2a:	6004      	str	r4, [r0, #0]
 8000c2c:	e7ec      	b.n	8000c08 <_free_r+0x24>
 8000c2e:	4613      	mov	r3, r2
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	b10a      	cbz	r2, 8000c38 <_free_r+0x54>
 8000c34:	42a2      	cmp	r2, r4
 8000c36:	d9fa      	bls.n	8000c2e <_free_r+0x4a>
 8000c38:	6819      	ldr	r1, [r3, #0]
 8000c3a:	1858      	adds	r0, r3, r1
 8000c3c:	42a0      	cmp	r0, r4
 8000c3e:	d10b      	bne.n	8000c58 <_free_r+0x74>
 8000c40:	6820      	ldr	r0, [r4, #0]
 8000c42:	4401      	add	r1, r0
 8000c44:	1858      	adds	r0, r3, r1
 8000c46:	4282      	cmp	r2, r0
 8000c48:	6019      	str	r1, [r3, #0]
 8000c4a:	d1dd      	bne.n	8000c08 <_free_r+0x24>
 8000c4c:	6810      	ldr	r0, [r2, #0]
 8000c4e:	6852      	ldr	r2, [r2, #4]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	4401      	add	r1, r0
 8000c54:	6019      	str	r1, [r3, #0]
 8000c56:	e7d7      	b.n	8000c08 <_free_r+0x24>
 8000c58:	d902      	bls.n	8000c60 <_free_r+0x7c>
 8000c5a:	230c      	movs	r3, #12
 8000c5c:	602b      	str	r3, [r5, #0]
 8000c5e:	e7d3      	b.n	8000c08 <_free_r+0x24>
 8000c60:	6820      	ldr	r0, [r4, #0]
 8000c62:	1821      	adds	r1, r4, r0
 8000c64:	428a      	cmp	r2, r1
 8000c66:	bf04      	itt	eq
 8000c68:	6811      	ldreq	r1, [r2, #0]
 8000c6a:	6852      	ldreq	r2, [r2, #4]
 8000c6c:	6062      	str	r2, [r4, #4]
 8000c6e:	bf04      	itt	eq
 8000c70:	1809      	addeq	r1, r1, r0
 8000c72:	6021      	streq	r1, [r4, #0]
 8000c74:	605c      	str	r4, [r3, #4]
 8000c76:	e7c7      	b.n	8000c08 <_free_r+0x24>
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000084 	.word	0x20000084

08000c80 <_malloc_r>:
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	1ccd      	adds	r5, r1, #3
 8000c84:	f025 0503 	bic.w	r5, r5, #3
 8000c88:	3508      	adds	r5, #8
 8000c8a:	2d0c      	cmp	r5, #12
 8000c8c:	bf38      	it	cc
 8000c8e:	250c      	movcc	r5, #12
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	db01      	blt.n	8000c9a <_malloc_r+0x1a>
 8000c96:	42a9      	cmp	r1, r5
 8000c98:	d903      	bls.n	8000ca2 <_malloc_r+0x22>
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	6033      	str	r3, [r6, #0]
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
 8000ca2:	f000 f8f1 	bl	8000e88 <__malloc_lock>
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <_malloc_r+0xac>)
 8000ca8:	6814      	ldr	r4, [r2, #0]
 8000caa:	4621      	mov	r1, r4
 8000cac:	b991      	cbnz	r1, 8000cd4 <_malloc_r+0x54>
 8000cae:	4c20      	ldr	r4, [pc, #128]	; (8000d30 <_malloc_r+0xb0>)
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	b91b      	cbnz	r3, 8000cbc <_malloc_r+0x3c>
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	f000 f83d 	bl	8000d34 <_sbrk_r>
 8000cba:	6020      	str	r0, [r4, #0]
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f000 f838 	bl	8000d34 <_sbrk_r>
 8000cc4:	1c43      	adds	r3, r0, #1
 8000cc6:	d124      	bne.n	8000d12 <_malloc_r+0x92>
 8000cc8:	230c      	movs	r3, #12
 8000cca:	6033      	str	r3, [r6, #0]
 8000ccc:	4630      	mov	r0, r6
 8000cce:	f000 f8dc 	bl	8000e8a <__malloc_unlock>
 8000cd2:	e7e4      	b.n	8000c9e <_malloc_r+0x1e>
 8000cd4:	680b      	ldr	r3, [r1, #0]
 8000cd6:	1b5b      	subs	r3, r3, r5
 8000cd8:	d418      	bmi.n	8000d0c <_malloc_r+0x8c>
 8000cda:	2b0b      	cmp	r3, #11
 8000cdc:	d90f      	bls.n	8000cfe <_malloc_r+0x7e>
 8000cde:	600b      	str	r3, [r1, #0]
 8000ce0:	50cd      	str	r5, [r1, r3]
 8000ce2:	18cc      	adds	r4, r1, r3
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	f000 f8d0 	bl	8000e8a <__malloc_unlock>
 8000cea:	f104 000b 	add.w	r0, r4, #11
 8000cee:	1d23      	adds	r3, r4, #4
 8000cf0:	f020 0007 	bic.w	r0, r0, #7
 8000cf4:	1ac3      	subs	r3, r0, r3
 8000cf6:	d0d3      	beq.n	8000ca0 <_malloc_r+0x20>
 8000cf8:	425a      	negs	r2, r3
 8000cfa:	50e2      	str	r2, [r4, r3]
 8000cfc:	e7d0      	b.n	8000ca0 <_malloc_r+0x20>
 8000cfe:	428c      	cmp	r4, r1
 8000d00:	684b      	ldr	r3, [r1, #4]
 8000d02:	bf16      	itet	ne
 8000d04:	6063      	strne	r3, [r4, #4]
 8000d06:	6013      	streq	r3, [r2, #0]
 8000d08:	460c      	movne	r4, r1
 8000d0a:	e7eb      	b.n	8000ce4 <_malloc_r+0x64>
 8000d0c:	460c      	mov	r4, r1
 8000d0e:	6849      	ldr	r1, [r1, #4]
 8000d10:	e7cc      	b.n	8000cac <_malloc_r+0x2c>
 8000d12:	1cc4      	adds	r4, r0, #3
 8000d14:	f024 0403 	bic.w	r4, r4, #3
 8000d18:	42a0      	cmp	r0, r4
 8000d1a:	d005      	beq.n	8000d28 <_malloc_r+0xa8>
 8000d1c:	1a21      	subs	r1, r4, r0
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f000 f808 	bl	8000d34 <_sbrk_r>
 8000d24:	3001      	adds	r0, #1
 8000d26:	d0cf      	beq.n	8000cc8 <_malloc_r+0x48>
 8000d28:	6025      	str	r5, [r4, #0]
 8000d2a:	e7db      	b.n	8000ce4 <_malloc_r+0x64>
 8000d2c:	20000084 	.word	0x20000084
 8000d30:	20000088 	.word	0x20000088

08000d34 <_sbrk_r>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4c06      	ldr	r4, [pc, #24]	; (8000d50 <_sbrk_r+0x1c>)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	4605      	mov	r5, r0
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	6023      	str	r3, [r4, #0]
 8000d40:	f7ff fbbc 	bl	80004bc <_sbrk>
 8000d44:	1c43      	adds	r3, r0, #1
 8000d46:	d102      	bne.n	8000d4e <_sbrk_r+0x1a>
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	b103      	cbz	r3, 8000d4e <_sbrk_r+0x1a>
 8000d4c:	602b      	str	r3, [r5, #0]
 8000d4e:	bd38      	pop	{r3, r4, r5, pc}
 8000d50:	2000008c 	.word	0x2000008c

08000d54 <__sread>:
 8000d54:	b510      	push	{r4, lr}
 8000d56:	460c      	mov	r4, r1
 8000d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5c:	f000 f896 	bl	8000e8c <_read_r>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	bfab      	itete	ge
 8000d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d66:	89a3      	ldrhlt	r3, [r4, #12]
 8000d68:	181b      	addge	r3, r3, r0
 8000d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d6e:	bfac      	ite	ge
 8000d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d72:	81a3      	strhlt	r3, [r4, #12]
 8000d74:	bd10      	pop	{r4, pc}

08000d76 <__swrite>:
 8000d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7a:	461f      	mov	r7, r3
 8000d7c:	898b      	ldrh	r3, [r1, #12]
 8000d7e:	05db      	lsls	r3, r3, #23
 8000d80:	4605      	mov	r5, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	4616      	mov	r6, r2
 8000d86:	d505      	bpl.n	8000d94 <__swrite+0x1e>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d90:	f000 f868 	bl	8000e64 <_lseek_r>
 8000d94:	89a3      	ldrh	r3, [r4, #12]
 8000d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d9e:	81a3      	strh	r3, [r4, #12]
 8000da0:	4632      	mov	r2, r6
 8000da2:	463b      	mov	r3, r7
 8000da4:	4628      	mov	r0, r5
 8000da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000daa:	f000 b817 	b.w	8000ddc <_write_r>

08000dae <__sseek>:
 8000dae:	b510      	push	{r4, lr}
 8000db0:	460c      	mov	r4, r1
 8000db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db6:	f000 f855 	bl	8000e64 <_lseek_r>
 8000dba:	1c43      	adds	r3, r0, #1
 8000dbc:	89a3      	ldrh	r3, [r4, #12]
 8000dbe:	bf15      	itete	ne
 8000dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8000dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000dca:	81a3      	strheq	r3, [r4, #12]
 8000dcc:	bf18      	it	ne
 8000dce:	81a3      	strhne	r3, [r4, #12]
 8000dd0:	bd10      	pop	{r4, pc}

08000dd2 <__sclose>:
 8000dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dd6:	f000 b813 	b.w	8000e00 <_close_r>
	...

08000ddc <_write_r>:
 8000ddc:	b538      	push	{r3, r4, r5, lr}
 8000dde:	4c07      	ldr	r4, [pc, #28]	; (8000dfc <_write_r+0x20>)
 8000de0:	4605      	mov	r5, r0
 8000de2:	4608      	mov	r0, r1
 8000de4:	4611      	mov	r1, r2
 8000de6:	2200      	movs	r2, #0
 8000de8:	6022      	str	r2, [r4, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	f7ff fb15 	bl	800041a <_write>
 8000df0:	1c43      	adds	r3, r0, #1
 8000df2:	d102      	bne.n	8000dfa <_write_r+0x1e>
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	b103      	cbz	r3, 8000dfa <_write_r+0x1e>
 8000df8:	602b      	str	r3, [r5, #0]
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
 8000dfc:	2000008c 	.word	0x2000008c

08000e00 <_close_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4c06      	ldr	r4, [pc, #24]	; (8000e1c <_close_r+0x1c>)
 8000e04:	2300      	movs	r3, #0
 8000e06:	4605      	mov	r5, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	6023      	str	r3, [r4, #0]
 8000e0c:	f7ff fb21 	bl	8000452 <_close>
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	d102      	bne.n	8000e1a <_close_r+0x1a>
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	b103      	cbz	r3, 8000e1a <_close_r+0x1a>
 8000e18:	602b      	str	r3, [r5, #0]
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
 8000e1c:	2000008c 	.word	0x2000008c

08000e20 <_fstat_r>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4c07      	ldr	r4, [pc, #28]	; (8000e40 <_fstat_r+0x20>)
 8000e24:	2300      	movs	r3, #0
 8000e26:	4605      	mov	r5, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	f7ff fb1c 	bl	800046a <_fstat>
 8000e32:	1c43      	adds	r3, r0, #1
 8000e34:	d102      	bne.n	8000e3c <_fstat_r+0x1c>
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	b103      	cbz	r3, 8000e3c <_fstat_r+0x1c>
 8000e3a:	602b      	str	r3, [r5, #0]
 8000e3c:	bd38      	pop	{r3, r4, r5, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000008c 	.word	0x2000008c

08000e44 <_isatty_r>:
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	4c06      	ldr	r4, [pc, #24]	; (8000e60 <_isatty_r+0x1c>)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4605      	mov	r5, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	f7ff fb1b 	bl	800048a <_isatty>
 8000e54:	1c43      	adds	r3, r0, #1
 8000e56:	d102      	bne.n	8000e5e <_isatty_r+0x1a>
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	b103      	cbz	r3, 8000e5e <_isatty_r+0x1a>
 8000e5c:	602b      	str	r3, [r5, #0]
 8000e5e:	bd38      	pop	{r3, r4, r5, pc}
 8000e60:	2000008c 	.word	0x2000008c

08000e64 <_lseek_r>:
 8000e64:	b538      	push	{r3, r4, r5, lr}
 8000e66:	4c07      	ldr	r4, [pc, #28]	; (8000e84 <_lseek_r+0x20>)
 8000e68:	4605      	mov	r5, r0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	2200      	movs	r2, #0
 8000e70:	6022      	str	r2, [r4, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	f7ff fb14 	bl	80004a0 <_lseek>
 8000e78:	1c43      	adds	r3, r0, #1
 8000e7a:	d102      	bne.n	8000e82 <_lseek_r+0x1e>
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	b103      	cbz	r3, 8000e82 <_lseek_r+0x1e>
 8000e80:	602b      	str	r3, [r5, #0]
 8000e82:	bd38      	pop	{r3, r4, r5, pc}
 8000e84:	2000008c 	.word	0x2000008c

08000e88 <__malloc_lock>:
 8000e88:	4770      	bx	lr

08000e8a <__malloc_unlock>:
 8000e8a:	4770      	bx	lr

08000e8c <_read_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4c07      	ldr	r4, [pc, #28]	; (8000eac <_read_r+0x20>)
 8000e90:	4605      	mov	r5, r0
 8000e92:	4608      	mov	r0, r1
 8000e94:	4611      	mov	r1, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	6022      	str	r2, [r4, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f7ff faa0 	bl	80003e0 <_read>
 8000ea0:	1c43      	adds	r3, r0, #1
 8000ea2:	d102      	bne.n	8000eaa <_read_r+0x1e>
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	b103      	cbz	r3, 8000eaa <_read_r+0x1e>
 8000ea8:	602b      	str	r3, [r5, #0]
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
 8000eac:	2000008c 	.word	0x2000008c

08000eb0 <_init>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr

08000ebc <_fini>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr
